{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"pyratings \u2014 Working with credit ratings, professionally and efficiently","text":"<p>Documentation: https://hsbc.github.io/pyratings/</p> <p>Source Code: https://github.com/hsbc/pyratings/</p>"},{"location":"#what-is-it-all-about","title":"What is it all about?","text":"<p>Do you work in the investment industry? Do you work with fixed income instruments, such as bonds and credit securities? Then you are probably concerned with credit ratings, too?</p> <p>This Python library will be useful for portfolio managers, credit analysts, as well  as anybody who is working with credit ratings. It provides functions, which will be helpful in order to work with ratings in  a professional and efficient way.</p>"},{"location":"#table-of-contents","title":"Table of contents","text":"<ul> <li>What has pyratings to offer and how might it help you?</li> <li>How to install pyratings?</li> <li>Getting started with pyratings<ul> <li>Cleaning ratings</li> <li>Consolidating ratings</li> <li>Translating ratings</li> </ul> </li> <li>Support</li> <li>Contributing</li> <li>Acknowlegdements</li> <li>License</li> </ul>"},{"location":"#what-has-pyratings-to-offer-and-how-might-it-help-you","title":"What has pyratings to offer and how might it help you?","text":"<p>Do you need to compute the average credit rating of an investment portfolio? Do you need to compute the worst rating for individual securities', given these  securities have ratings attached from more than one rating agency? Do you need to compute the Weighted Average Rating Factor (WARF)?</p> <p>If yes, you might want to take a look at pyratings and its offerings in the credit  ratings space.</p> <p>pyratings offers the following capabilities:</p> <ul> <li>Cleaning ratings for further processing, e.g. stripping off of rating watches.</li> <li>Transform long- and short-term ratings into rating scores and vice versa.</li> <li>Compute the best/second best/worst ratings on a security level basis within a   portfolio context.</li> <li>Compute average ratings/rating scores on a portfolio level.</li> <li>Compute Weighted Average Rating Factor (WARF) on a portfolio level.</li> <li>Compute WARF buffer, i.e. distance from current WARF to the next maxWARF.</li> </ul> <p>pyratings supports  long-term ratings as well as  short-term ratings. Currently, the following rating agencies will be supported:</p> <ul> <li>Moody's (long-term / short-term)</li> <li>Standard &amp; Poors (long-term / short-term)</li> <li>Fitch (long-term / short-term)</li> <li>DBRS Morningstar (long-term / short-term)</li> <li>Bloomberg (long-term)</li> </ul>"},{"location":"#how-to-install-pyratings","title":"How to install pyratings?","text":"<p>pyratings is listed on pypi. Make sure to have Python 3.10+ installed on your machine.</p> <p>Using pip:</p> <pre><code>pip install pyratings\n</code></pre> <p>Using pdm:</p> <pre><code>pdm add pyratings\n</code></pre> <p>Using poetry:</p> <pre><code>poetry add pyratings\n</code></pre>"},{"location":"#getting-started-with-pyratings","title":"Getting started with pyratings","text":"<p>Here are some very basic code snippets to get you up and running.</p>"},{"location":"#cleaning-ratings","title":"Cleaning ratings","text":"<p>Sometimes, a rating has a credit watch or an outlook attached to it. In order to work with this rating, it is usually necessary to get rid of it.</p> <pre><code>&gt;&gt;&gt; import pyratings as rtg\n\n&gt;&gt;&gt; rtg.get_pure_ratings(\"AA- *+\")\n\"AA-\"\n</code></pre> <p>Cleaning a pandas datraframe, which comprises several securities with ratings from S&amp;P  and Fitch:</p> <pre><code>&gt;&gt;&gt; import numpy as np\n&gt;&gt;&gt; import pandas as pd\n\n&gt;&gt;&gt; import pyratings as rtg\n\n\n&gt;&gt;&gt; rtg_df = pd.DataFrame(\n...    data={\n...        \"rtg_SP\": [\n...            \"BB+ *-\",\n...            \"BBB *+\",\n...            np.nan,\n...            \"AA- (Developing)\",\n...            np.nan,\n...            \"CCC+ (CwPositive)\",\n...            \"BB+u\",\n...        ],\n...        \"rtg_Fitch\": [\n...            \"BB+ *-\",\n...            \"BBB *+\",\n...            np.nan,\n...            \"AA- (Developing)\",\n...            np.nan,\n...            \"CCC+ (CwPositive)\",\n...            \"BB+u\",\n...        ],\n...    },\n... )\n\n&gt;&gt;&gt; rtg_df\n              rtg_SP          rtg_Fitch\n0             BB+ *-             BB+ *-\n1             BBB *+             BBB *+\n2                NaN                NaN\n3   AA- (Developing)   AA- (Developing)\n4                NaN                NaN\n5  CCC+ (CwPositive)  CCC+ (CwPositive)\n6               BB+u               BB+u\n\n# Get rid of all the noise.\n\n&gt;&gt;&gt; rtg.get_pure_ratings(rtg_df)\n  rtg_SP_clean rtg_Fitch_clean\n0          BB+             BB+\n1          BBB             BBB\n2          NaN             NaN\n3          AA-             AA-\n4          NaN             NaN\n5         CCC+            CCC+\n6          BB+             BB+\n</code></pre>"},{"location":"#consolidating-ratings","title":"Consolidating ratings","text":"<p>It is quite common that an individual credit security has been rated by several  credit agencies. In this case, you may want to compute the best or worst rating. </p> <pre><code>&gt;&gt;&gt; import pandas as pd\n\n&gt;&gt;&gt; import pyratings as rtg\n\n&gt;&gt;&gt; ratings_df = pd.DataFrame(\n...     data=(\n...         {\n...             \"rating_S&amp;P\": ['AAA', 'AA-', 'AA+', 'BB-', 'C'],\n...             \"rating_Moody\": ['Aa1', 'Aa3', 'Aa2', 'Ba3', 'Ca'],\n...             \"rating_Fitch\": ['AA-', 'AA-', 'AA-', 'B+', 'C'],\n...         }\n...     )\n... )\n\n&gt;&gt;&gt;  ratings_df\n  rating_S&amp;P rating_Moody rating_Fitch\n0        AAA          Aa1          AA-\n1        AA-          Aa3          AA-\n2        AA+          Aa2          AA-\n3        BB-          Ba3           B+\n4          C           Ca            C\n\n# Return a pd.Series with the worst ratings.\n\n&gt;&gt;&gt; rtg.get_worst_ratings(\n...   ratings_df, rating_provider_input=[\"S&amp;P\", \"Moody\", \"Fitch\"]\n... )\n0    AA-\n1    AA-\n2    AA-\n3     B+\n4      C\nName: worst_rtg, dtype: object\n</code></pre>"},{"location":"#translating-ratings","title":"Translating ratings","text":"<p>To work with ratings, it's sometimes necessary to translate human-readable ratings  into numerical rating scores and vice versa. pyratings offers a number of functions on that front.</p> <p>The documentation shows  in detail how pyratings translates human-readable ratings into numerical rating  scores. Here's an example how to translate a pandas series from ratings to scores and vice  versa. </p> <pre><code>&gt;&gt;&gt; import pandas as pd\n\n&gt;&gt;&gt; import pyratings as rtg\n\n\n&gt;&gt;&gt; ratings_series = pd.Series(\n...     data=[\"Baa1\", \"C\", \"NR\", \"WD\", \"D\", \"B1\", \"SD\"], name='Moody'\n... )\n&gt;&gt;&gt; scores_series = rtg.get_scores_from_ratings(\n...     ratings=ratings_series, rating_provider=\"Moody's\", tenor=\"long-term\"\n... )\n&gt;&gt;&gt; scores_series\n0     8.0\n1    21.0\n2     NaN\n3     NaN\n4    22.0\n5    14.0\n6    22.0\nName: rtg_score_Moody, dtype: float64\n\n# Translate these rating scores back, but this time use DBRS' rating scale\n\n&gt;&gt;&gt; rtg.get_ratings_from_scores(\n...     rating_scores=scores_series, rating_provider=\"DBRS\", tenor=\"long-term\"\n... )\n0    BBBH\n1       C\n2     NaN\n3     NaN\n4       D\n5      BH\n6       D\nName: rtg_DBRS, dtype: object\n</code></pre>"},{"location":"#support","title":"Support","text":"<p>If you need help or have any questions, the first step should be to take a look at the  docs. If you can't find an answer, please open an issue on  GitHub, or send an email to  opensource@hsbc.de. The subject line should contain '#pyratings'</p>"},{"location":"#contributing","title":"Contributing","text":"<p>We very much welcome contributions! Before you begin, please read our  contributing guideliens.</p>"},{"location":"#acknowledgements","title":"Acknowledgements","text":"<p>Thanks to</p> <ul> <li>Andreas Vester, project creator and lead developer</li> <li>Deepak Parashar, for their help with    testing the code and working on all kinds of PRs.</li> <li>Sander Cohen, for their help to improve the    documentation as well as the intense discussion on how to best implement    short-term ratings into the project.</li> <li>Marco Erling, for actively participating in    discussions on how to best incorporate short-term ratings.</li> <li>Thomas Steenbergen, for their   code contribution regarding the    improvement of metadata in setup.py.</li> <li>Ekow Folson, for their help of setting up this    repository and make it possible to become the very first open source contribution    from HSBC.</li> </ul>"},{"location":"#license","title":"License","text":"<p>This project is licensed under the Apache 2.0 License \u2013 please see the LICENSE file.</p>"},{"location":"api_reference/","title":"API Reference","text":""},{"location":"api_reference/#clean-ratings","title":"Clean ratings","text":"<p>Module contains functions to clean ratings.</p>"},{"location":"api_reference/#pyratings.clean.get_pure_ratings","title":"get_pure_ratings","text":"<pre><code>get_pure_ratings(ratings)\n</code></pre> <p>Remove rating watches/outlooks and other non-actual-rating related information.</p> <p>Ratings may contain watch, such as 'AA- *+', 'BBB+ (CwNegative)'. Outlook/watch should be seperated by a blank from the actual rating. Also, ratings may also contain the letter 'u' (unsolicited) or be prefixed by '(P)' (public information only). This kind of information will be removed to retrieve the actual rating(s).</p> <p>Parameters:</p> Name Type Description Default <code>ratings</code> <code>str | Series | DataFrame</code> <p>Uncleaned rating(s).</p> required <p>Returns:</p> Type Description <code>Union[str, Series, DataFrame]</code> <p>Regular ratings stripped off of watches. The name of the resulting Series or the columns of the returning DataFrame will be suffixed with <code>_clean</code>.</p> <p>Examples:</p> <p>Cleaning a single rating:</p> <pre><code>&gt;&gt;&gt; get_pure_ratings(\"AA- *+\")\n'AA-'\n</code></pre> <pre><code>&gt;&gt;&gt; get_pure_ratings(\"Au\")\n'A'\n</code></pre> <pre><code>&gt;&gt;&gt; get_pure_ratings(\"(P)P-2\")\n'P-2'\n</code></pre> <p>Cleaning a <code>pd.Series</code>:</p> <pre><code>&gt;&gt;&gt; import numpy as np\n&gt;&gt;&gt; import pandas as pd\n</code></pre> <pre><code>&gt;&gt;&gt; rating_series = pd.Series(\n...     data=[\n...         \"BB+ *-\",\n...         \"(P)BBB *+\",\n...         np.nan,\n...         \"AA- (Developing)\",\n...         np.nan,\n...         \"CCC+ (CwPositive)\",\n...         \"BB+u\",\n...     ],\n...     name=\"rtg_SP\",\n... )\n&gt;&gt;&gt; get_pure_ratings(rating_series)\n0     BB+\n1     BBB\n2     NaN\n3     AA-\n4     NaN\n5    CCC+\n6     BB+\nName: rtg_SP_clean, dtype: object\n</code></pre> <p>Cleaning a <code>pd.DataFrame</code>:</p> <pre><code>&gt;&gt;&gt; rtg_df = pd.DataFrame(\n...     data={\n...         \"rtg_SP\": [\n...             \"BB+ *-\",\n...             \"BBB *+\",\n...             np.nan,\n...             \"AA- (Developing)\",\n...             np.nan,\n...             \"CCC+ (CwPositive)\",\n...             \"BB+u\",\n...         ],\n...         \"rtg_Fitch\": [\n...             \"BB+ *-\",\n...             \"BBB *+\",\n...             pd.NA,\n...             \"AA- (Developing)\",\n...             np.nan,\n...             \"CCC+ (CwPositive)\",\n...             \"BB+u\",\n...         ],\n...     },\n... )\n&gt;&gt;&gt; get_pure_ratings(rtg_df)\n  rtg_SP_clean rtg_Fitch_clean\n0          BB+             BB+\n1          BBB             BBB\n2          NaN            &lt;NA&gt;\n3          AA-             AA-\n4          NaN             NaN\n5         CCC+            CCC+\n6          BB+             BB+\n</code></pre>"},{"location":"api_reference/#consolitdate-ratings","title":"Consolitdate ratings","text":"<p>Module contains functions to consolidate ratings from different rating agencies.</p>"},{"location":"api_reference/#pyratings.consolidate.consolidate_ratings","title":"consolidate_ratings","text":"<pre><code>consolidate_ratings(\n    ratings,\n    method=\"worst\",\n    rating_provider_input=None,\n    rating_provider_output=\"S&amp;P\",\n    tenor=\"long-term\",\n)\n</code></pre> <p>Consolidate ratings on a security level basis across rating agencies .</p> <p>Parameters:</p> Name Type Description Default <code>ratings</code> <code>DataFrame</code> <p>Dataframe consisting of clean ratings (i.e. stripped off of watches/outlooks)</p> required <code>method</code> <code>Literal['best', 'second_best', 'worst']</code> <p>Defines the method that will be used in order to consolidate the ratings on a security level basis across rating agencies. Valid methods are {\"best\", \"second_best\", \"worst\"}.</p> <code>'worst'</code> <code>rating_provider_input</code> <code>list[str]</code> <p>Indicates rating providers within <code>ratings</code>. Should contain any valid rating provider out of {\"Fitch\", \"Moody's\", \"S&amp;P\", \"Bloomberg\", \"DBRS\"}.</p> <p>If None, <code>rating_provider_input</code> will be inferred from the dataframe column names.</p> <code>None</code> <code>rating_provider_output</code> <code>Literal['Fitch', 'Moody', 'S&amp;P', 'Bloomberg', 'DBRS']</code> <p>Indicates which rating scale will be used for output results. Should contain any valid rating provider out of {\"Fitch\", \"Moody's\", \"S&amp;P\", \"Bloomberg\", \"DBRS\"}.</p> <code>'S&amp;P'</code> <code>tenor</code> <code>Literal['long-term', 'short-term']</code> <p>Should contain any valid tenor out of {\"long-term\", \"short-term\"}</p> <code>'long-term'</code> <p>Returns:</p> Type Description <code>Series</code> <p>Consolidated ratings on a security level basis.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; import pandas as pd\n</code></pre> <pre><code>&gt;&gt;&gt; ratings_df = pd.DataFrame(\n...     data=(\n...         {\n...             \"rating_S&amp;P\": [\"AAA\", \"AA-\", \"AA+\", \"BB-\", \"C\"],\n...             \"rating_Moody's\": [\"Aa1\", \"Aa3\", \"Aa2\", \"Ba3\", \"Ca\"],\n...             \"rating_Fitch\": [\"AA-\", \"AA-\", \"AA-\", \"B+\", \"C\"],\n...         }\n...     )\n... )\n</code></pre> <p>Identify the best ratings:</p> <pre><code>&gt;&gt;&gt; consolidate_ratings(\n...     ratings=ratings_df,\n...     method=\"best\",\n...     rating_provider_input=[\"S&amp;P\", \"Moody\", \"Fitch\"],\n...     rating_provider_output=\"Moody\",\n... )\n0    Aaa\n1    Aa3\n2    Aa1\n3    Ba3\n4    Ca\nName: best_rtg, dtype: object\n</code></pre> <p>Identify the second-best ratings:</p> <pre><code>&gt;&gt;&gt; consolidate_ratings(\n...     ratings=ratings_df,\n...     method=\"second_best\",\n...     rating_provider_input=[\"S&amp;P\", \"Moody\", \"Fitch\"],\n...     rating_provider_output=\"DBRS\",\n... )\n0    AAH\n1    AAL\n2    AA\n3    BBL\n4    C\nName: second_best_rtg, dtype: object\n</code></pre> <p>Identify the worst ratings:</p> <pre><code>&gt;&gt;&gt; consolidate_ratings(\n...     ratings=ratings_df,\n...     method=\"worst\",\n...     rating_provider_input=[\"S&amp;P\", \"Moody\", \"Fitch\"],\n... )\n0    AA-\n1    AA-\n2    AA-\n3    B+\n4    C\nName: worst_rtg, dtype: object\n</code></pre>"},{"location":"api_reference/#pyratings.consolidate.get_best_ratings","title":"get_best_ratings","text":"<pre><code>get_best_ratings(\n    ratings,\n    rating_provider_input=None,\n    rating_provider_output=\"S&amp;P\",\n    tenor=\"long-term\",\n)\n</code></pre> <p>Compute the best rating on a security level basis across rating agencies.</p> <p>Parameters:</p> Name Type Description Default <code>ratings</code> <code>DataFrame</code> <p>Dataframe consisting of clean ratings (i.e. stripped off of watches/outlooks)</p> required <code>rating_provider_input</code> <code>list[str]</code> <p>Indicates rating providers within <code>ratings</code>. Should contain any valid rating provider out of {\"Fitch\", \"Moody's\", \"S&amp;P\", \"Bloomberg\", \"DBRS\"}.</p> <p>If None, <code>rating_provider_input</code> will be inferred from the dataframe column names.</p> <code>None</code> <code>rating_provider_output</code> <code>Literal['Fitch', 'Moody', 'S&amp;P', 'Bloomberg', 'DBRS']</code> <p>Indicates which rating scale will be used for output results. Should contain any valid rating provider out of {\"Fitch\", \"Moody's\", \"S&amp;P\", \"Bloomberg\", \"DBRS\"}.</p> <code>'S&amp;P'</code> <code>tenor</code> <code>Literal['long-term', 'short-term']</code> <p>Should contain any valid tenor out of {\"long-term\", \"short-term\"}</p> <code>'long-term'</code> <p>Returns:</p> Type Description <code>Series</code> <p>Best ratings on a security level basis.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; import pandas as pd\n</code></pre> <pre><code>&gt;&gt;&gt; ratings_df = pd.DataFrame(\n...     data=(\n...         {\n...             \"rating_S&amp;P\": [\"AAA\", \"AA-\", \"AA+\", \"BB-\", \"C\"],\n...             \"rating_Moody's\": [\"Aa1\", \"Aa3\", \"Aa2\", \"Ba3\", \"Ca\"],\n...             \"rating_Fitch\": [\"AA-\", \"AA-\", \"AA-\", \"B+\", \"C\"],\n...         }\n...     )\n... )\n&gt;&gt;&gt; get_best_ratings(ratings_df, rating_provider_input=[\"S&amp;P\", \"Moody\", \"Fitch\"])\n0    AAA\n1    AA-\n2    AA+\n3    BB-\n4    CC\nName: best_rtg, dtype: object\n</code></pre>"},{"location":"api_reference/#pyratings.consolidate.get_best_scores","title":"get_best_scores","text":"<pre><code>get_best_scores(\n    ratings, rating_provider_input=None, tenor=\"long-term\"\n)\n</code></pre> <p>Compute the best rating scores on a security level basis across rating agencies.</p> <p>Parameters:</p> Name Type Description Default <code>ratings</code> <code>DataFrame</code> <p>Dataframe consisting of clean ratings (i.e. stripped off of watches/outlooks)</p> required <code>rating_provider_input</code> <code>list[str]</code> <p>Indicates rating providers within <code>ratings</code>. Should contain any valid rating provider out of {\"Fitch\", \"Moody's\", \"S&amp;P\", \"Bloomberg\", \"DBRS\"}.</p> <p>If None, <code>rating_provider_input</code> will be inferred from the dataframe column names.</p> <code>None</code> <code>tenor</code> <code>Literal['long-term', 'short-term']</code> <p>Should contain any valid tenor out of {\"long-term\", \"short-term\"}</p> <code>'long-term'</code> <p>Returns:</p> Type Description <code>Series</code> <p>Best rating scores on a security level basis.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; import pandas as pd\n</code></pre> <pre><code>&gt;&gt;&gt; ratings_df = pd.DataFrame(\n...     data=(\n...         {\n...             \"rating_S&amp;P\": [\"AAA\", \"AA-\", \"AA+\", \"BB-\", \"C\"],\n...             \"rating_Moody's\": [\"Aa1\", \"Aa3\", \"Aa2\", \"Ba3\", \"Ca\"],\n...             \"rating_Fitch\": [\"AA-\", \"AA-\", \"AA-\", \"B+\", \"C\"],\n...         }\n...     )\n... )\n&gt;&gt;&gt; get_best_scores(\n...     ratings=ratings_df, rating_provider_input=[\"S&amp;P\", \"Moody\", \"Fitch\"]\n... )\n0     1\n1     4\n2     2\n3    13\n4    20\nName: best_scores, dtype: int64\n</code></pre>"},{"location":"api_reference/#pyratings.consolidate.get_second_best_ratings","title":"get_second_best_ratings","text":"<pre><code>get_second_best_ratings(\n    ratings,\n    rating_provider_input=None,\n    rating_provider_output=\"S&amp;P\",\n    tenor=\"long-term\",\n)\n</code></pre> <p>Compute the second-best rating on a security level basis across rating agencies.</p> <p>Parameters:</p> Name Type Description Default <code>ratings</code> <code>DataFrame</code> <p>Dataframe consisting of clean ratings (i.e. stripped off of watches/outlooks)</p> required <code>rating_provider_input</code> <code>list[str]</code> <p>Indicates rating providers within <code>ratings</code>. Should contain any valid rating provider out of {\"Fitch\", \"Moody's\", \"S&amp;P\", \"Bloomberg\", \"DBRS\"}.</p> <p>If None, <code>rating_provider_input</code> will be inferred from the dataframe column names.</p> <code>None</code> <code>rating_provider_output</code> <code>Literal['Fitch', 'Moody', 'S&amp;P', 'Bloomberg', 'DBRS']</code> <p>Indicates which rating scale will be used for output results. Should contain any valid rating provider out of {\"Fitch\", \"Moody's\", \"S&amp;P\", \"Bloomberg\", \"DBRS\"}.</p> <code>'S&amp;P'</code> <code>tenor</code> <code>Literal['long-term', 'short-term']</code> <p>Should contain any valid tenor out of {\"long-term\", \"short-term\"}</p> <code>'long-term'</code> <p>Returns:</p> Type Description <code>Series</code> <p>Second-best ratings on a security level basis.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; import pandas as pd\n</code></pre> <pre><code>&gt;&gt;&gt; ratings_df = pd.DataFrame(\n...     data=(\n...         {\n...             \"rating_S&amp;P\": [\"AAA\", \"AA-\", \"AA+\", \"BB-\", \"C\"],\n...             \"rating_Moody's\": [\"Aa1\", \"Aa3\", \"Aa2\", \"Ba3\", \"Ca\"],\n...             \"rating_Fitch\": [\"AA-\", \"AA-\", \"AA-\", \"B+\", \"C\"],\n...         }\n...     )\n... )\n&gt;&gt;&gt; get_second_best_ratings(\n...     ratings_df, rating_provider_input=[\"S&amp;P\", \"Moody\", \"Fitch\"]\n... )\n0    AA+\n1    AA-\n2     AA\n3    BB-\n4      C\nName: second_best_rtg, dtype: object\n</code></pre>"},{"location":"api_reference/#pyratings.consolidate.get_second_best_scores","title":"get_second_best_scores","text":"<pre><code>get_second_best_scores(\n    ratings, rating_provider_input=None, tenor=\"long-term\"\n)\n</code></pre> <p>Compute the second-best scores on a security level basis across rating agencies.</p> <p>Parameters:</p> Name Type Description Default <code>ratings</code> <code>DataFrame</code> <p>Dataframe consisting of clean ratings (i.e. stripped off of watches/outlooks)</p> required <code>rating_provider_input</code> <code>list[str]</code> <p>Indicates rating providers within <code>ratings</code>. Should contain any valid rating provider out of {\"Fitch\", \"Moody's\", \"S&amp;P\", \"Bloomberg\", \"DBRS\"}.</p> <p>If None, <code>rating_provider_input</code> will be inferred from the dataframe column names.</p> <code>None</code> <code>tenor</code> <code>Literal['long-term', 'short-term']</code> <p>Should contain any valid tenor out of {\"long-term\", \"short-term\"}</p> <code>'long-term'</code> <p>Returns:</p> Type Description <code>Series</code> <p>Second-best scores on a security level basis.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; import pandas as pd\n</code></pre> <pre><code>&gt;&gt;&gt; ratings_df = pd.DataFrame(\n...     data=(\n...         {\n...             \"rating_S&amp;P\": [\"AAA\", \"AA-\", \"AA+\", \"BB-\", \"C\"],\n...             \"rating_Moody's\": [\"Aa1\", \"Aa3\", \"Aa2\", \"Ba3\", \"Ca\"],\n...             \"rating_Fitch\": [\"AA-\", \"AA-\", \"AA-\", \"B+\", \"C\"],\n...         }\n...     )\n... )\n&gt;&gt;&gt; get_second_best_scores(\n...     ratings_df, rating_provider_input=[\"S&amp;P\", \"Moody\", \"Fitch\"]\n... )\n0     2.0\n1     4.0\n2     3.0\n3    13.0\n4    21.0\nName: second_best_scores, dtype: float64\n</code></pre>"},{"location":"api_reference/#pyratings.consolidate.get_worst_ratings","title":"get_worst_ratings","text":"<pre><code>get_worst_ratings(\n    ratings,\n    rating_provider_input=None,\n    rating_provider_output=\"S&amp;P\",\n    tenor=\"long-term\",\n)\n</code></pre> <p>Compute the worst rating on a security level basis across rating agencies.</p> <p>Parameters:</p> Name Type Description Default <code>ratings</code> <code>DataFrame</code> <p>Dataframe consisting of clean ratings (i.e. stripped off of watches/outlooks)</p> required <code>rating_provider_input</code> <code>list[str]</code> <p>Indicates rating providers within <code>ratings</code>. Should contain any valid rating provider out of {\"Fitch\", \"Moody's\", \"S&amp;P\", \"Bloomberg\", \"DBRS\"}.</p> <p>If None, <code>rating_provider_innput</code> will be inferred from the dataframe column names.</p> <code>None</code> <code>rating_provider_output</code> <code>Literal['Fitch', 'Moody', 'S&amp;P', 'Bloomberg', 'DBRS']</code> <p>Indicates which rating scale will be used for output results. Should contain any valid rating provider out of {\"Fitch\", \"Moody's\", \"S&amp;P\", \"Bloomberg\", \"DBRS\"}.</p> <code>'S&amp;P'</code> <code>tenor</code> <code>Literal['long-term', 'short-term']</code> <p>Should contain any valid tenor out of {\"long-term\", \"short-term\"}</p> <code>'long-term'</code> <p>Returns:</p> Type Description <code>Series</code> <p>Worst ratings on a security level basis.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; import pandas as pd\n</code></pre> <pre><code>&gt;&gt;&gt; ratings_df = pd.DataFrame(\n...     data=(\n...         {\n...             \"rating_S&amp;P\": [\"AAA\", \"AA-\", \"AA+\", \"BB-\", \"C\"],\n...             \"rating_Moody's\": [\"Aa1\", \"Aa3\", \"Aa2\", \"Ba3\", \"Ca\"],\n...             \"rating_Fitch\": [\"AA-\", \"AA-\", \"AA-\", \"B+\", \"C\"],\n...         }\n...     )\n... )\n&gt;&gt;&gt; get_worst_ratings(ratings_df, rating_provider_input=[\"S&amp;P\", \"Moody\", \"Fitch\"])\n0    AA-\n1    AA-\n2    AA-\n3     B+\n4      C\nName: worst_rtg, dtype: object\n</code></pre>"},{"location":"api_reference/#pyratings.consolidate.get_worst_scores","title":"get_worst_scores","text":"<pre><code>get_worst_scores(\n    ratings, rating_provider_input=None, tenor=\"long-term\"\n)\n</code></pre> <p>Compute the worst scores on a security level basis across rating agencies.</p> <p>Parameters:</p> Name Type Description Default <code>ratings</code> <code>DataFrame</code> <p>Dataframe consisting of clean ratings (i.e. stripped off of watches/outlooks)</p> required <code>rating_provider_input</code> <code>list[str]</code> <p>Indicates rating providers within <code>ratings</code>. Should contain any valid rating provider out of {\"Fitch\", \"Moody's\", \"S&amp;P\", \"Bloomberg\", \"DBRS\"}.</p> <p>If None, <code>rating_provider_innput</code> will be inferred from the dataframe column names.</p> <code>None</code> <code>tenor</code> <code>Literal['long-term', 'short-term']</code> <p>Should contain any valid tenor out of {\"long-term\", \"short-term\"}</p> <code>'long-term'</code> <p>Returns:</p> Type Description <code>Series</code> <p>Worst scores on a security level basis.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; import pandas as pd\n</code></pre> <pre><code>&gt;&gt;&gt; ratings_df = pd.DataFrame(\n...     data=(\n...         {\n...             \"rating_S&amp;P\": [\"AAA\", \"AA-\", \"AA+\", \"BB-\", \"C\"],\n...             \"rating_Moody's\": [\"Aa1\", \"Aa3\", \"Aa2\", \"Ba3\", \"Ca\"],\n...             \"rating_Fitch\": [\"AA-\", \"AA-\", \"AA-\", \"B+\", \"C\"],\n...         }\n...     )\n... )\n&gt;&gt;&gt; get_worst_scores(ratings_df, rating_provider_input=[\"S&amp;P\", \"Moody\", \"Fitch\"])\n0     4\n1     4\n2     4\n3    14\n4    21\nName: worst_scores, dtype: int64\n</code></pre>"},{"location":"api_reference/#get-rating-scores","title":"Get rating scores","text":"<p>Module contains functions to translate ratings / WARF into rating scores.</p> <p>All functions use the following table in order to translate between long-term ratings/WARF and numerical rating scores.</p> Moody S&amp;P Fitch DBRS Bloomberg Score WARF MinWARF* MaxWARF* Aaa AAA AAA AAA AAA 1 1 1 5 Aa1 AA+ AA+ AAH AA+ 2 10 5 15 Aa2 AA AA AA AA 3 20 15 30 Aa3 AA- AA- AAL AA- 4 40 30 55 A1 A+ A+ AH A+ 5 70 55 95 A2 A A A A 6 120 95 150 A3 A- A- AL A- 7 180 150 220 Baa1 BBB+ BBB+ BBBH BBB+ 8 260 220 310 Baa2 BBB BBB BBB BBB 9 360 310 485 Baa3 BBB- BBB- BBBL BBB- 10 610 485 775 Ba1 BB+ BB+ BBH BB+ 11 940 775 1145 Ba2 BB BB BB BB 12 1350 1145 1558 Ba3 BB- BB- BBL BB- 13 1766 1558 1993 B1 B+ B+ BH B+ 14 2220 1993 2470 B2 B B B B 15 2720 2470 3105 B3 B- B- BL B- 16 3490 3105 4130 Caa1 CCC+ CCC+ CCCH CCC+ 17 4770 4130 5635 Caa2 CCC CCC CCC CCC 18 6500 5635 7285 Caa3 CCC- CCC- CCCL CCC- 19 8070 7285 9034 Ca CC CC CC CC 20 9998 9034 9998.5 C C C C C 21 9999 9998.5 9999.5 D D D D DDD 22 10000 9999.5 10000 <p><code>MinWARF</code> is inclusive, while <code>MaxWARF</code> is exclusive.</p> <p>For short-term ratings, the rating will be translated into an equivalent long-term rating score. The translation will depend on a \"translation strategy\". The following translation table will be used:</p> Agency Strategy Rating MinLTScore MaxLTScore AvgLTScore Moody's best P-1 1 7 4.00 Moody's best P-2 8 9 8.50 Moody's best P-3 10 10 10.00 Moody's best NP 11 22 16.50 Moody's base P-1 1 6 3.50 Moody's base P-2 7 8 7.50 Moody's base P-3 9 10 9.50 Moody's base NP 11 22 16.50 Moody's worst P-1 1 5 3.00 Moody's worst P-2 6 8 7.00 Moody's worst P-3 9 10 9.50 Moody's worst NP 11 22 16.50 S&amp;P best A-1+ 1 5 3.00 S&amp;P best A-1 6 7 6.50 S&amp;P best A-2 8 9 8.50 S&amp;P best A-3 10 11 10.50 S&amp;P best B 12 16 14.00 S&amp;P best C 17 21 19.00 S&amp;P best D 22 22 22.00 S&amp;P base A-1+ 1 4 2.50 S&amp;P base A-1 5 6 5.50 S&amp;P base A-2 7 9 8.00 S&amp;P base A-3 10 10 10.00 S&amp;P base B 11 16 13.50 S&amp;P base C 17 21 19.00 S&amp;P base D 22 22 22.00 S&amp;P worst A-1+ 1 4 2.50 S&amp;P worst A-1 5 6 5.50 S&amp;P worst A-2 7 9 8.00 S&amp;P worst A-3 10 10 10.00 S&amp;P worst B 11 16 13.50 S&amp;P worst C 17 21 19.00 S&amp;P worst D 22 22 22.00 Fitch best F1+ 1 6 3.50 Fitch best F1 7 8 7.50 Fitch best F2 9 9 9.00 Fitch best F3 10 10 10.00 Fitch best B 11 16 13.50 Fitch best C 17 20 18.50 Fitch best D 21 22 21.50 Fitch base F1+ 1 5 3.00 Fitch base F1 6 7 6.50 Fitch base F2 8 8 8.00 Fitch base F3 9 10 9.50 Fitch base B 11 16 13.50 Fitch base C 17 20 18.50 Fitch base D 21 22 21.50 Fitch worst F1+ 1 4 2.50 Fitch worst F1 5 6 5.50 Fitch worst F2 7 8 7.50 Fitch worst F3 9 10 9.50 Fitch worst B 11 16 13.50 Fitch worst C 17 20 18.50 Fitch worst D 21 22 21.50 DBRS best R-1 H 1 3 2.00 DBRS best R-1 M 4 5 4.50 DBRS best R-1 L 6 8 7.00 DBRS best R-2 H 9 9 9.00 DBRS best R-2 M 10 10 10.00 DBRS best R-3 11 11 11.00 DBRS best R-4 12 15 13.50 DBRS best R-5 16 21 18.50 DBRS best D 22 22 22.00 DBRS base R-1 H 1 2 1.50 DBRS base R-1 M 3 4 3.50 DBRS base R-1 L 5 7 6.00 DBRS base R-2 H 8 8 8.00 DBRS base R-2 M 9 9 9.00 DBRS base R-2 L / R-3 10 10 10.00 DBRS base R-4 11 14 12.50 DBRS base R-5 15 21 18.00 DBRS base D 22 22 22.00 DBRS worst R-1 H 1 1 1.00 DBRS worst R-1 M 2 3 2.50 DBRS worst R-1 L 4 6 5.00 DBRS worst R-2 H 7 8 7.50 DBRS worst R-2 M 9 9 9.00 DBRS worst R-3 10 10 10.00 DBRS worst R-4 11 14 12.50 DBRS worst R-5 15 21 18.00 DBRS worst D 22 22 22.00"},{"location":"api_reference/#pyratings.get_scores.get_scores_from_ratings","title":"get_scores_from_ratings","text":"<pre><code>get_scores_from_ratings(\n    ratings, rating_provider=None, tenor=\"long-term\"\n)\n</code></pre> <p>Convert regular ratings into numerical rating scores.</p> <p>Parameters:</p> Name Type Description Default <code>ratings</code> <code>str | Series | DataFrame</code> <p>Rating(s) to be translated into rating score(s).</p> required <code>rating_provider</code> <code>str | list[str] | None</code> <p>Should contain any valid rating provider out of {\"Fitch\", \"Moody's\", \"S&amp;P\", \"Bloomberg\", \"DBRS\"}.</p> <p>If None, <code>rating_provider</code> will be inferred from the series name or dataframe column names.</p> <code>None</code> <code>tenor</code> <code>str</code> <p>Should contain any valid tenor out of {\"long-term\", \"short-term\"}</p> <code>'long-term'</code> <p>Returns:</p> Type Description <code>Union[int, Series, DataFrame]</code> <p>Numerical rating score(s)</p> <p>If returns a <code>pd.Series</code>, the series name will be <code>rtg_score</code> suffixed by <code>ratings.name</code>.</p> <p>If return a <code>pd.DataFrame</code>, the column names will be <code>rtg_score</code> suffixed by the respective <code>ratings.columns</code>.</p> <p>Raises:</p> Type Description <code>ValueError</code> <p>If providing a single rating and <code>rating_provider</code> is None.</p> <p>Examples:</p> <p>Converting a single long-term rating:</p> <pre><code>&gt;&gt;&gt; get_scores_from_ratings(\n...     ratings=\"BBB-\", rating_provider=\"S&amp;P\", tenor=\"long-term\"\n... )\n10\n</code></pre> <p>Converting a single short-term rating score:</p> <pre><code>&gt;&gt;&gt; get_scores_from_ratings(\n...     ratings=\"P-1\", rating_provider=\"Moody\", tenor=\"short-term\"\n... )\n3.5\n</code></pre> <p>Converting a <code>pd.Series</code> of ratings:</p> <pre><code>&gt;&gt;&gt; import pandas as pd\n&gt;&gt;&gt; ratings_series = pd.Series(\n...     data=[\"Baa1\", \"C\", \"NR\", \"WD\", \"D\", \"B1\", \"SD\"], name=\"Moody\"\n... )\n&gt;&gt;&gt; get_scores_from_ratings(\n...     ratings=ratings_series, rating_provider=\"Moody's\", tenor=\"long-term\"\n... )\n0     8.0\n1    21.0\n2     NaN\n3     NaN\n4    22.0\n5    14.0\n6    22.0\nName: rtg_score_Moody, dtype: float64\n</code></pre> <p>Providing a <code>pd.Series</code> without specifying a <code>rating_provider</code>:</p> <pre><code>&gt;&gt;&gt; ratings_series = pd.Series(\n...     data=[\"Baa1\", \"C\", \"NR\", \"WD\", \"D\", \"B1\", \"SD\"], name=\"Moody\"\n... )\n&gt;&gt;&gt; get_scores_from_ratings(ratings=ratings_series)\n0     8.0\n1    21.0\n2     NaN\n3     NaN\n4    22.0\n5    14.0\n6    22.0\nName: rtg_score_Moody, dtype: float64\n</code></pre> <p>Converting a <code>pd.DataFrame</code> with ratings:</p> <pre><code>&gt;&gt;&gt; ratings_df = pd.DataFrame(\n...     data=[[\"BB+\", \"B3\", \"BBB-\"], [\"AA-\", \"Aa1\", \"AAA\"], [\"D\", \"NR\", \"D\"]],\n...     columns=[\"SP\", \"Moody\", \"DBRS\"],\n... )\n&gt;&gt;&gt; get_scores_from_ratings(\n...     ratings=ratings_df,\n...     rating_provider=[\"S&amp;P\", \"Moody's\", \"DBRS\"],\n...     tenor=\"long-term\",\n... )\n   rtg_score_SP  rtg_score_Moody  rtg_score_DBRS\n0            11             16.0             NaN\n1             4              2.0             1.0\n2            22              NaN            22.0\n</code></pre> <p>When providing a <code>pd.DataFrame</code> without explicitly providing the <code>rating_provider</code>, they will be inferred from the dataframe's columns.</p> <pre><code>&gt;&gt;&gt; ratings_df = pd.DataFrame(\n...     data={\n...         \"rtg_fitch\": [\"BB+\", \"AA-\", \"D\"],\n...         \"rtg_Bloomberg\": [\"B-\", \"AA+\", \"NR\"],\n...         \"DBRS Ratings\": [\"BBB-\", \"AAA\", \"D\"],\n...     }\n... )\n&gt;&gt;&gt; get_scores_from_ratings(ratings=ratings_df)\n   rtg_score_rtg_fitch  rtg_score_rtg_Bloomberg  rtg_score_DBRS Ratings\n0                   11                     16.0                     NaN\n1                    4                      2.0                     1.0\n2                   22                      NaN                    22.0\n</code></pre>"},{"location":"api_reference/#pyratings.get_scores.get_scores_from_warf","title":"get_scores_from_warf","text":"<pre><code>get_scores_from_warf(warf)\n</code></pre> <p>Convert weighted average rating factors (WARFs) into numerical rating scores.</p> <p>Parameters:</p> Name Type Description Default <code>warf</code> <code>float | Series | DataFrame</code> <p>Weighted average rating factor (WARF).</p> required <p>Returns:</p> Type Description <code>Union[int, float, Series, DataFrame]</code> <p>Numerical rating score(s).</p> <p>Examples:</p> <p>Converting a single WARF:</p> <pre><code>&gt;&gt;&gt; get_scores_from_warf(500)\n10\n</code></pre> <pre><code>&gt;&gt;&gt; get_scores_from_warf(1992.9999)\n13\n</code></pre> <p>Converting a <code>pd.Series</code> of WARFs:</p> <pre><code>&gt;&gt;&gt; import numpy as np\n&gt;&gt;&gt; import pandas as pd\n&gt;&gt;&gt; warf_series = pd.Series(data=[260, 9999.49, np.nan, 10000, 2469.99, 2470])\n&gt;&gt;&gt; get_scores_from_warf(warf=warf_series)\n0     8.0\n1    21.0\n2     NaN\n3    22.0\n4    14.0\n5    15.0\nName: rtg_score, dtype: float64\n</code></pre> <p>Converting a <code>pd.DataFrame</code> of WARFs:</p> <pre><code>&gt;&gt;&gt; warf_df = pd.DataFrame(\n...     data={\n...         \"provider1\": [900, 40, 10000],\n...         \"provider2\": [3000, 10, np.nan],\n...         \"provider3\": [610, 1, 9999.49],\n...     }\n... )\n&gt;&gt;&gt; get_scores_from_warf(warf=warf_df)\n   rtg_score_provider1  rtg_score_provider2  rtg_score_provider3\n0                   11                 15.0                   10\n1                    4                  2.0                    1\n2                   22                  NaN                   21\n</code></pre>"},{"location":"api_reference/#get-warf","title":"Get WARF","text":"<p>Module contains functions to translate ratings / rating scores into WARF(s).</p> <p>All functions use the following table in order to translate between long-term ratings/numerical scores and WARF.</p> Moody\u2019s S&amp;P Fitch DBRS Bloomberg Score WARF Aaa AAA AAA AAA AAA 1 1 Aa1 AA+ AA+ AAH AA+ 2 10 Aa2 AA AA AA AA 3 20 Aa3 AA- AA- AAL AA- 4 40 A1 A+ A+ AH A+ 5 70 A2 A A A A 6 120 A3 A- A- AL A- 7 180 Baa1 BBB+ BBB+ BBBH BBB+ 8 260 Baa2 BBB BBB BBB BBB 9 360 Baa3 BBB- BBB- BBBL BBB- 10 610 Ba1 BB+ BB+ BBH BB+ 11 940 Ba2 BB BB BB BB 12 1350 Ba3 BB- BB- BBL BB- 13 1766 B1 B+ B+ BH B+ 14 2220 B2 B B B B 15 2720 B3 B- B- BL B- 16 3490 Caa1 CCC+ CCC+ CCCH CCC+ 17 4770 Caa2 CCC CCC CCC CCC 18 6500 Caa3 CCC- CCC- CCCL CCC- 19 8070 Ca CC CC CC CC 20 9998 C C C C C 21 9999 D D D D DDD 22 10000"},{"location":"api_reference/#pyratings.get_warf.get_warf_from_ratings","title":"get_warf_from_ratings","text":"<pre><code>get_warf_from_ratings(ratings, rating_provider=None)\n</code></pre> <p>Convert regular rating(s) to numerical WARF(s).</p> <p>Parameters:</p> Name Type Description Default <code>ratings</code> <code>str | Series | DataFrame</code> <p>Regular rating(s) to be translated into WARF(s).</p> required <code>rating_provider</code> <code>str | list[str] | None</code> <p>Should contain any valid rating provider out of {\"Fitch\", \"Moody's\", \"S&amp;P\", \"Bloomberg\", \"DBRS\"}.</p> <p>If None, <code>rating_provider</code> will be inferred from the series name or dataframe column names.</p> <code>None</code> <p>Returns:</p> Type Description <code>Union[int, Series, DataFrame]</code> <p>Numerical WARF.</p> <p>If returns a <code>pd.Series</code>, the series name will be <code>warf</code> suffixed by <code>ratings.name</code>.</p> <p>If return a <code>pd.DataFrame</code>, the column names will be <code>warf</code> suffixed by the respective <code>ratings.columns</code>.</p> <p>Examples:</p> <p>Converting a single rating:</p> <pre><code>&gt;&gt;&gt; get_warf_from_ratings(ratings=\"BB-\", rating_provider=\"Fitch\")\n1766\n</code></pre> <p>Converting a <code>pd.Series</code> with ratings:</p> <pre><code>&gt;&gt;&gt; import numpy as np\n&gt;&gt;&gt; import pandas as pd\n&gt;&gt;&gt; ratings_series = pd.Series(data=[\"A1\", \"A3\", \"Aaa\", np.nan, \"D\", pd.NA])\n&gt;&gt;&gt; get_warf_from_ratings(ratings=ratings_series, rating_provider=\"Moody's\")\n0       70.0\n1      180.0\n2        1.0\n3        NaN\n4    10000.0\n5        NaN\nName: warf, dtype: float64\n</code></pre> <p>Providing a <code>pd.Series</code> without specifying a <code>rating_provider</code>:</p> <pre><code>&gt;&gt;&gt; ratings_series = pd.Series(\n...     data=[\"A1\", \"A3\", \"Aaa\", np.nan, \"D\", pd.NA], name=\"Moody's\"\n... )\n&gt;&gt;&gt; get_warf_from_ratings(ratings=ratings_series)\n0       70.0\n1      180.0\n2        1.0\n3        NaN\n4    10000.0\n5        NaN\nName: warf_Moody's, dtype: float64\n</code></pre> <p>Converting a <code>pd.DataFrame</code> with ratings:</p> <pre><code>&gt;&gt;&gt; ratings_df = pd.DataFrame(\n...     data=[[\"BB+\", \"B-\", \"foo\"], [\"AA-\", \"AA+\", \"AAA\"], [\"D\", \"bar\", \"C\"]],\n...     columns=[\"Fitch\", \"Bloomberg\", \"DBRS\"],\n... )\n&gt;&gt;&gt; get_warf_from_ratings(\n...     ratings=ratings_df, rating_provider=[\"Fitch\", \"Bloomberg\", \"DBRS\"]\n... )\n   warf_Fitch  warf_Bloomberg  warf_DBRS\n0         940          3490.0        NaN\n1          40            10.0        1.0\n2       10000             NaN     9999.0\n</code></pre> <p>When providing a <code>pd.DataFrame</code> without explicitly providing the <code>rating_provider</code>, they will be inferred by the dataframe's columns.</p> <pre><code>&gt;&gt;&gt; ratings_df = pd.DataFrame(\n...     data={\n...         \"rtg_fitch\": [\"BB+\", \"AA-\", \"D\"],\n...         \"rtg_Bloomberg\": [\"B-\", \"AA+\", \"bar\"],\n...         \"DBRS Ratings\": [\"foo\", \"AAA\", \"C\"],\n...     }\n... )\n&gt;&gt;&gt; get_warf_from_ratings(ratings=ratings_df)\n   warf_rtg_fitch  warf_rtg_Bloomberg  warf_DBRS Ratings\n0             940              3490.0                NaN\n1              40                10.0                1.0\n2           10000                 NaN             9999.0\n</code></pre>"},{"location":"api_reference/#pyratings.get_warf.get_warf_from_scores","title":"get_warf_from_scores","text":"<pre><code>get_warf_from_scores(rating_scores)\n</code></pre> <p>Convert numerical rating score(s) to numerical WARF(s).</p> <p>Parameters:</p> Name Type Description Default <code>rating_scores</code> <code>float | Series | DataFrame</code> <p>Numerical rating score(s).</p> required <p>Returns:</p> Type Description <code>Union[int, pd.Series, pd.DataFrame</code> <p>Numerical WARF(s).</p> <p>If returns a <code>pd.Series</code>, the series name will be <code>warf</code> suffixed by <code>rating_scores.name</code>.</p> <p>If return a <code>pd.DataFrame</code>, the column names will be <code>warf</code> suffixed by the respective <code>rating_scores.columns</code>.</p> <p>Examples:</p> <p>Converting a single rating score:</p> <pre><code>&gt;&gt;&gt; get_warf_from_scores(10)\n610\n</code></pre> <p>Converting a <code>pd.Series</code> with rating scores:</p> <pre><code>&gt;&gt;&gt; import pandas as pd\n&gt;&gt;&gt; rating_scores_series = pd.Series(data=[5, 7, 1, np.nan, 22, pd.NA])\n&gt;&gt;&gt; get_warf_from_scores(rating_scores=rating_scores_series)\n0       70.0\n1      180.0\n2        1.0\n3        NaN\n4    10000.0\n5        NaN\nName: warf, dtype: float64\n</code></pre> <p>Converting a <code>pd.DataFrame</code> with rating scores:</p> <pre><code>&gt;&gt;&gt; rating_scores_df = pd.DataFrame(\n...     data=[[11, 16, \"foo\"], [4, 2, 1], [22, \"bar\", 22]],\n...     columns=[\"provider1\", \"provider2\", \"provider3\"],\n... )\n&gt;&gt;&gt; get_warf_from_scores(rating_scores=rating_scores_df)\n   warf_provider1  warf_provider2  warf_provider3\n0             940          3490.0             NaN\n1              40            10.0             1.0\n2           10000             NaN         10000.0\n</code></pre>"},{"location":"api_reference/#get-ratings","title":"Get ratings","text":"<p>Module contains functions to translate rating scores / WARF into ratings.</p> <p>All functions use the following table in order to translate between numerical scores/WARF and long-term ratings.</p> Moody\u2019s S&amp;P Fitch DBRS Bloomberg Score WARF MinWARF* MaxWARF* Aaa AAA AAA AAA AAA 1 1 1 5 Aa1 AA+ AA+ AAH AA+ 2 10 5 15 Aa2 AA AA AA AA 3 20 15 30 Aa3 AA- AA- AAL AA- 4 40 30 55 A1 A+ A+ AH A+ 5 70 55 95 A2 A A A A 6 120 95 150 A3 A- A- AL A- 7 180 150 220 Baa1 BBB+ BBB+ BBBH BBB+ 8 260 220 310 Baa2 BBB BBB BBB BBB 9 360 310 485 Baa3 BBB- BBB- BBBL BBB- 10 610 485 775 Ba1 BB+ BB+ BBH BB+ 11 940 775 1145 Ba2 BB BB BB BB 12 1350 1145 1558 Ba3 BB- BB- BBL BB- 13 1766 1558 1993 B1 B+ B+ BH B+ 14 2220 1993 2470 B2 B B B B 15 2720 2470 3105 B3 B- B- BL B- 16 3490 3105 4130 Caa1 CCC+ CCC+ CCCH CCC+ 17 4770 4130 5635 Caa2 CCC CCC CCC CCC 18 6500 5635 7285 Caa3 CCC- CCC- CCCL CCC- 19 8070 7285 9034 Ca CC CC CC CC 20 9998 9034 9998.5 C C C C C 21 9999 9998.5 9999.5 D D D D DDD 22 10000 9999.5 10000 <p>For short-term ratings, the rating will be translated into an equivalent long-term rating score. The translation will depend on the a \"translation strategy\". The following translation table will be used:</p> Agency Strategy Rating MinLTScore MaxLTScore AvgLTScore Moody's best P-1 1 7 4.00 Moody's best P-2 8 9 8.50 Moody's best P-3 10 10 10.00 Moody's best NP 11 22 16.50 Moody's base P-1 1 6 3.50 Moody's base P-2 7 8 7.50 Moody's base P-3 9 10 9.50 Moody's base NP 11 22 16.50 Moody's worst P-1 1 5 3.00 Moody's worst P-2 6 8 7.00 Moody's worst P-3 9 10 9.50 Moody's worst NP 11 22 16.50 S&amp;P best A-1+ 1 5 3.00 S&amp;P best A-1 6 7 6.50 S&amp;P best A-2 8 9 8.50 S&amp;P best A-3 10 11 10.50 S&amp;P best B 12 16 14.00 S&amp;P best C 17 21 19.00 S&amp;P best D 22 22 22.00 S&amp;P base A-1+ 1 4 2.50 S&amp;P base A-1 5 6 5.50 S&amp;P base A-2 7 9 8.00 S&amp;P base A-3 10 10 10.00 S&amp;P base B 11 16 13.50 S&amp;P base C 17 21 19.00 S&amp;P base D 22 22 22.00 S&amp;P worst A-1+ 1 4 2.50 S&amp;P worst A-1 5 6 5.50 S&amp;P worst A-2 7 9 8.00 S&amp;P worst A-3 10 10 10.00 S&amp;P worst B 11 16 13.50 S&amp;P worst C 17 21 19.00 S&amp;P worst D 22 22 22.00 Fitch best F1+ 1 6 3.50 Fitch best F1 7 8 7.50 Fitch best F2 9 9 9.00 Fitch best F3 10 10 10.00 Fitch best B 11 16 13.50 Fitch best C 17 20 18.50 Fitch best D 21 22 21.50 Fitch base F1+ 1 5 3.00 Fitch base F1 6 7 6.50 Fitch base F2 8 8 8.00 Fitch base F3 9 10 9.50 Fitch base B 11 16 13.50 Fitch base C 17 20 18.50 Fitch base D 21 22 21.50 Fitch worst F1+ 1 4 2.50 Fitch worst F1 5 6 5.50 Fitch worst F2 7 8 7.50 Fitch worst F3 9 10 9.50 Fitch worst B 11 16 13.50 Fitch worst C 17 20 18.50 Fitch worst D 21 22 21.50 DBRS best R-1 H 1 3 2.00 DBRS best R-1 M 4 5 4.50 DBRS best R-1 L 6 8 7.00 DBRS best R-2 H 9 9 9.00 DBRS best R-2 M 10 10 10.00 DBRS best R-3 11 11 11.00 DBRS best R-4 12 15 13.50 DBRS best R-5 16 21 18.50 DBRS best D 22 22 22.00 DBRS base R-1 H 1 2 1.50 DBRS base R-1 M 3 4 3.50 DBRS base R-1 L 5 7 6.00 DBRS base R-2 H 8 8 8.00 DBRS base R-2 M 9 9 9.00 DBRS base R-2 L / R-3 10 10 10.00 DBRS base R-4 11 14 12.50 DBRS base R-5 15 21 18.00 DBRS base D 22 22 22.00 DBRS worst R-1 H 1 1 1.00 DBRS worst R-1 M 2 3 2.50 DBRS worst R-1 L 4 6 5.00 DBRS worst R-2 H 7 8 7.50 DBRS worst R-2 M 9 9 9.00 DBRS worst R-3 10 10 10.00 DBRS worst R-4 11 14 12.50 DBRS worst R-5 15 21 18.00 DBRS worst D 22 22 22.00"},{"location":"api_reference/#pyratings.get_ratings.get_ratings_from_scores","title":"get_ratings_from_scores","text":"<pre><code>get_ratings_from_scores(\n    rating_scores,\n    rating_provider=None,\n    tenor=\"long-term\",\n    short_term_strategy=None,\n)\n</code></pre> <p>Convert numerical rating scores into regular ratings.</p> <p>Parameters:</p> Name Type Description Default <code>rating_scores</code> <code>float | Series | DataFrame</code> <p>Numerical rating score(s).</p> required <code>rating_provider</code> <code>str | list[str] | None</code> <p>Should contain any valid rating provider out of {\"Fitch\", \"Moody's\", \"S&amp;P\", \"Bloomberg\", \"DBRS\"}.</p> <p>If None, <code>rating_provider</code> will be inferred from the series name or dataframe column names.</p> <code>None</code> <code>tenor</code> <code>str</code> <p>Should contain any valid tenor out of {\"long-term\", \"short-term\"}.</p> <code>'long-term'</code> <code>short_term_strategy</code> <code>str | None</code> <p>Will only be used, if <code>tenor</code> is \"short-term\". Choose between three distinct strategies in order to translate a long-term rating score into a short-term rating. Must be in {\"best\", \"base\", \"worst\"}.</p> <p>Compare https://hsbc.github.io/pyratings/short-term-rating/#there's-one-more-catch...</p> <ul> <li>Strategy 1 (best):   Always choose the best possible short-term rating. That's the optimistic   approach.</li> <li>Strategy 2 (base-case):   Always choose the short-term rating that a rating agency would usually assign   if there aren't any special liquidity issues (positive or negative). That's   the base-case approach.</li> <li>Strategy 3 (worst):   Always choose the worst possible short-term rating. That's the conservative   approach.</li> </ul> <code>None</code> <p>Returns:</p> Type Description <code>Union[str, Series, DataFrame]</code> <p>Regular ratings according to <code>rating_provider</code>'s rating scale.</p> <p>Raises:</p> Type Description <code>ValueError</code> <p>If providing a single rating score and <code>rating_provider</code> is None.</p> <p>Examples:</p> <p>Converting a single long-term rating score:</p> <pre><code>&gt;&gt;&gt; get_ratings_from_scores(rating_scores=9, rating_provider=\"Fitch\")\n'BBB'\n</code></pre> <p>Converting a single short-term rating score with different <code>short_term_strategy</code> arguments:</p> <pre><code>&gt;&gt;&gt; get_ratings_from_scores(\n...     rating_scores=10,\n...     rating_provider=\"DBRS\",\n...     tenor=\"short-term\",\n...     short_term_strategy=\"best\",\n... )\n'R-2M'\n</code></pre> <pre><code>&gt;&gt;&gt; get_ratings_from_scores(\n...     rating_scores=10,\n...     rating_provider=\"DBRS\",\n...     tenor=\"short-term\",\n...     short_term_strategy=\"base\",\n... )\n'R-3'\n</code></pre> <pre><code>&gt;&gt;&gt; get_ratings_from_scores(\n...     rating_scores=10,\n...     rating_provider=\"DBRS\",\n...     tenor=\"short-term\",\n...     short_term_strategy=\"worst\",\n... )\n'R-3'\n</code></pre> <p>Converting a <code>pd.Series</code> with scores:</p> <pre><code>&gt;&gt;&gt; import pandas as pd\n&gt;&gt;&gt; rating_scores_series = pd.Series(data=[5, 7, 1, np.nan, 22, pd.NA])\n&gt;&gt;&gt; get_ratings_from_scores(\n...     rating_scores=rating_scores_series,\n...     rating_provider=\"Moody's\",\n...     tenor=\"long-term\",\n... )\n0     A1\n1     A3\n2    Aaa\n3    NaN\n4      D\n5    NaN\nName: rtg_Moody, dtype: object\n</code></pre> <p>Providing a <code>pd.Series</code> without specifying a <code>rating_provider</code>:</p> <pre><code>&gt;&gt;&gt; rating_scores_series = pd.Series(\n...     data=[5, 7, 1, np.nan, 22, pd.NA],\n...     name=\"Moody\",\n... )\n&gt;&gt;&gt; get_ratings_from_scores(rating_scores=rating_scores_series)\n0     A1\n1     A3\n2    Aaa\n3    NaN\n4      D\n5    NaN\nName: rtg_Moody, dtype: object\n</code></pre> <p>Converting a <code>pd.DataFrame</code> with scores:</p> <pre><code>&gt;&gt;&gt; rating_scores_df = pd.DataFrame(\n...     data=[[11, 16, \"foo\"], [4, 2, 1], [22, \"bar\", 22]]\n... )\n&gt;&gt;&gt; get_ratings_from_scores(\n...     rating_scores=rating_scores_df,\n...     rating_provider=[\"Fitch\", \"Bloomberg\", \"DBRS\"],\n...     tenor=\"long-term\",\n... )\n  rtg_Fitch rtg_Bloomberg rtg_DBRS\n0       BB+            B-      NaN\n1       AA-           AA+      AAA\n2         D           NaN        D\n</code></pre> <p>When providing a <code>pd.DataFrame</code> without explicitly providing the <code>rating_provider</code>, they will be inferred by the dataframe's columns.</p> <pre><code>&gt;&gt;&gt; rating_scores_df = pd.DataFrame(\n...     data={\n...         \"rtg_fitch\": [11, 4, 22],\n...         \"rtg_Bloomberg\": [16, 2, \"foo\"],\n...         \"DBRS Ratings\": [\"bar\", 1, 22],\n...     }\n... )\n&gt;&gt;&gt; get_ratings_from_scores(rating_scores=rating_scores_df)\n  rtg_Fitch rtg_Bloomberg rtg_DBRS\n0       BB+            B-      NaN\n1       AA-           AA+      AAA\n2         D           NaN        D\n</code></pre>"},{"location":"api_reference/#pyratings.get_ratings.get_ratings_from_warf","title":"get_ratings_from_warf","text":"<pre><code>get_ratings_from_warf(warf, rating_provider=None)\n</code></pre> <p>Convert WARFs into regular ratings.</p> <p>Parameters:</p> Name Type Description Default <code>warf</code> <code>float | Series | DataFrame</code> <p>Numerical WARF(s).</p> required <code>rating_provider</code> <code>str | list[str] | None</code> <p>Should contain any valid rating provider out of {\"Fitch\", \"Moody's\", \"S&amp;P\", \"Bloomberg\", \"DBRS\"}.</p> <code>None</code> <p>Returns:</p> Type Description <code>Union[str, Series, DataFrame]</code> <p>Regular rating(s) according to <code>rating_provider</code>'s rating scale.</p> <p>Examples:</p> <p>Converting a single WARF:</p> <pre><code>&gt;&gt;&gt; get_ratings_from_warf(warf=610, rating_provider=\"DBRS\")\n'BBBL'\n</code></pre> <pre><code>&gt;&gt;&gt; get_ratings_from_warf(warf=1234.5678, rating_provider=\"SP\")\n'BB'\n</code></pre> <p>Converting a <code>pd.Series</code> with WARFs:</p> <pre><code>&gt;&gt;&gt; import pandas as pd\n&gt;&gt;&gt; warf_series = pd.Series(data=[90, 218.999, 1, np.nan, 10000, pd.NA])\n&gt;&gt;&gt; get_ratings_from_warf(\n...     warf=warf_series,\n...     rating_provider=\"Moody's\",\n... )\n0     A1\n1     A3\n2    Aaa\n3    NaN\n4      D\n5    NaN\nName: rtg_Moody, dtype: object\n</code></pre> <p>Converting a <code>pd.DataFrame</code> with WARFs:</p> <pre><code>&gt;&gt;&gt; warf_df = pd.DataFrame(\n...     data=[[940, 4000, \"foo\"], [54, 13.5, 1], [10000, \"bar\", 9999]]\n... )\n&gt;&gt;&gt; get_ratings_from_warf(\n...     warf=warf_df,\n...     rating_provider=[\"Fitch\", \"Bloomberg\", \"DBRS\"],\n... )\n  rtg_Fitch rtg_Bloomberg rtg_DBRS\n0       BB+            B-      NaN\n1       AA-           AA+      AAA\n2         D           NaN        C\n</code></pre>"},{"location":"api_reference/#aggregate-functions","title":"Aggregate functions","text":"<p>Module contains aggregation functions.</p>"},{"location":"api_reference/#pyratings.aggregate.get_weighted_average","title":"get_weighted_average","text":"<pre><code>get_weighted_average(data, weights)\n</code></pre> <p>Compute weighted average.</p> <p>Parameters:</p> Name Type Description Default <code>data</code> <code>Series</code> <p>Contains numerical values.</p> required <code>weights</code> <code>Series</code> <p>Contains weights (between 0 and 1) with respect to <code>data</code>.</p> required <p>Returns:</p> Type Description <code>float</code> <p>Weighted average data.</p> Notes <p>Computing the weighted average is simply the sumproduct of <code>data</code> and <code>weights</code>. <code>nan</code> in <code>data</code> will be excluded from calculating the weighted average. All corresponding weights will be ignored. As a matter of fact, the remaining weights will be upscaled so that the weights of all <code>non-nan</code> rows in <code>data</code> will sum up to 1 (100%).</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; import numpy as np\n&gt;&gt;&gt; import pandas as pd\n</code></pre> <pre><code>&gt;&gt;&gt; rtg_scores = pd.Series(data=[5, 7, 9])\n&gt;&gt;&gt; wgt = pd.Series(data=[0.5, 0.3, 0.2])\n&gt;&gt;&gt; get_weighted_average(data=rtg_scores, weights=wgt)\nnp.float64(6.4)\n</code></pre> <pre><code>&gt;&gt;&gt; warf = pd.Series(data=[500, 735, np.nan, 93, np.nan])\n&gt;&gt;&gt; wgt = pd.Series(data=[0.4, 0.1, 0.1, 0.2, 0.2])\n&gt;&gt;&gt; get_weighted_average(data=warf, weights=wgt).round(2)\nnp.float64(417.29)\n</code></pre>"},{"location":"api_reference/#warf-functions","title":"WARF functions","text":"<p>Module holds functions to work with WARFs.</p> <p>All functions use the following translation table.</p> Moody\u2019s S&amp;P Fitch DBRS Bloomberg Score WARF MinWARF* MaxWARF* Aaa AAA AAA AAA AAA 1 1 1 5 Aa1 AA+ AA+ AAH AA+ 2 10 5 15 Aa2 AA AA AA AA 3 20 15 30 Aa3 AA- AA- AAL AA- 4 40 30 55 A1 A+ A+ AH A+ 5 70 55 95 A2 A A A A 6 120 95 150 A3 A- A- AL A- 7 180 150 220 Baa1 BBB+ BBB+ BBBH BBB+ 8 260 220 310 Baa2 BBB BBB BBB BBB 9 360 310 485 Baa3 BBB- BBB- BBBL BBB- 10 610 485 775 Ba1 BB+ BB+ BBH BB+ 11 940 775 1145 Ba2 BB BB BB BB 12 1350 1145 1558 Ba3 BB- BB- BBL BB- 13 1766 1558 1993 B1 B+ B+ BH B+ 14 2220 1993 2470 B2 B B B B 15 2720 2470 3105 B3 B- B- BL B- 16 3490 3105 4130 Caa1 CCC+ CCC+ CCCH CCC+ 17 4770 4130 5635 Caa2 CCC CCC CCC CCC 18 6500 5635 7285 Caa3 CCC- CCC- CCCL CCC- 19 8070 7285 9034 Ca CC CC CC CC 20 9998 9034 9998.5 C C C C C 21 9999 9998.5 9999.5 D D D D DDD 22 10000 9999.5 10000 <p><code>MinWARF</code> is inclusive, while <code>MaxWARF</code> is exclusive.</p>"},{"location":"api_reference/#pyratings.warf.get_warf_buffer","title":"get_warf_buffer","text":"<pre><code>get_warf_buffer(warf)\n</code></pre> <p>Compute WARF buffer.</p> <p>The WARF buffer is the distance from current WARF to the next maxWARF level. It determines the room until a further rating downgrade.</p> <p>Parameters:</p> Name Type Description Default <code>warf</code> <code>float</code> <p>Numerical WARF.</p> required <p>Returns:</p> Type Description <code>Union[float, int]</code> <p>WARF buffer.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; get_warf_buffer(warf=480)\n5.0\n</code></pre> <pre><code>&gt;&gt;&gt; get_warf_buffer(warf=54)\n1.0\n</code></pre>"},{"location":"changelog/","title":"Changelog","text":"<p>All notable changes to this project will be documented in this file.</p> <p>The format is loosely based on Keep a Changelog, and this project adheres to Semantic Versioning.</p>"},{"location":"changelog/#unreleased","title":"Unreleased","text":""},{"location":"changelog/#062-2025-06-16","title":"0.6.2 - 2025-06-16","text":""},{"location":"changelog/#improved","title":"Improved","text":"<ul> <li>Migrated from pdm to uv.</li> </ul>"},{"location":"changelog/#security","title":"Security","text":"<ul> <li>Updated third-party dependencies.</li> </ul>"},{"location":"changelog/#061-2023-02-24","title":"0.6.1 - 2023-02-24","text":""},{"location":"changelog/#security_1","title":"Security","text":"<ul> <li>Updated third-party dependencies (#54,    #55).</li> </ul>"},{"location":"changelog/#improved_1","title":"Improved","text":"<ul> <li>Migrated from flake8 /    isort to ruff.</li> </ul>"},{"location":"changelog/#060-2023-01-18","title":"0.6.0 - 2023-01-18","text":""},{"location":"changelog/#added","title":"Added","text":"<ul> <li>Option to choose between three different strategies to translate scores into    short-term ratings (#24).</li> <li>Functionality to remove prefix '(P)' when cleaning ratings   (#27).</li> <li>Functions to consolidate ratings and return numerical rating scores   (#37):<ul> <li><code>get_best_scores</code></li> <li><code>get_second_best_scores</code></li> <li><code>get_worst_scores</code></li> </ul> </li> <li>Function <code>consolidate_ratings</code>: Wrapper function for <code>get_best_ratings</code>,    <code>get_second_best_ratings</code>, and <code>get_worst_ratings</code>   (#37).</li> </ul>"},{"location":"changelog/#changed","title":"Changed","text":"<ul> <li>BREAKING CHANGE: Automatic column naming   (#9). <ul> <li><code>get_scores_from_ratings()</code>   When input a <code>pd.Series</code>, the name of the output series will now become   <code>ratings.name</code> prefixed with \"rtg_score_\".   When input a <code>pd.DataFrame</code>, the column names of the output frame will now    become <code>ratings.columns</code> prefixed with \"rtg_score_\". </li> <li><code>get_warf_from_ratings()</code>    When input a pd.Series, the name of the output series will now become   <code>ratings.name</code> prefixed with \"warf_\".   When input a pd.DataFrame, the column names of the output frame will now become    <code>ratings.columns</code> prefixed with \"warf_\".</li> </ul> </li> <li>BREAKING CHANGE: Translations of short-term ratings are now different   (#16).</li> </ul>"},{"location":"changelog/#fixed","title":"Fixed","text":"<ul> <li>Short-term DBRS rating entries in Ratings.db   (#29).</li> </ul>"},{"location":"changelog/#improved_2","title":"Improved","text":"<ul> <li>Splitting the code base into multiple files in order to increase maintainability   (#8).</li> <li>Internal checks have been improved    (#20).</li> <li>Documentation has been updated and will now be created via   mkdocs and    mkdocstrings.</li> <li>Using nox to test the code base against multiple Python    versions.</li> <li>Make code base flake8 compliant.</li> <li>Use pre-commit to ensure good quality before    commiting/sending PRs.</li> <li>Use python-kacl in order to maintain CHAGELOG.</li> </ul>"},{"location":"changelog/#054-2022-07-07","title":"0.5.4 - 2022-07-07","text":""},{"location":"changelog/#refactored","title":"Refactored","text":"<ul> <li>Moved from <code>setup.py</code> to <code>pyproject.toml</code> configuration file.</li> </ul>"},{"location":"changelog/#053-2022-04-05","title":"0.5.3 - 2022-04-05","text":""},{"location":"changelog/#added_1","title":"Added","text":"<ul> <li>Complete documentation now available on public GitHub Pages at    https://hsbc.github.io/pyratings/.</li> </ul>"},{"location":"changelog/#052-2022-01-24","title":"0.5.2 - 2022-01-24","text":""},{"location":"changelog/#refactored_1","title":"Refactored","text":"<ul> <li>Moved sphinx configuration to <code>docsrc</code> folder.</li> <li>Documentation data for GitHub pages can be found under <code>docs</code>.</li> </ul>"},{"location":"changelog/#051-2022-01-06","title":"0.5.1 - 2022-01-06","text":""},{"location":"changelog/#security_2","title":"Security","text":"<ul> <li>Removed links to internal network drives in <code>tox.ini</code>.</li> <li>Removed links to GitHub issues in this <code>CHANGELOG.md</code> as they link to internal    GitHub repo.</li> </ul>"},{"location":"changelog/#050-2022-01-03","title":"0.5.0 - 2022-01-03","text":""},{"location":"changelog/#added_2","title":"Added","text":"<ul> <li><code>pyratings.get_scores_from_ratings</code></li> <li><code>pyratings.get_scores_from_warf</code></li> <li><code>pyratings.get_ratings_from_scores</code></li> <li><code>pyratings.get_ratings_from_warf</code></li> <li><code>pyratings.get_warf_from_scores</code></li> <li><code>pyratings.get_warf_from_ratings</code></li> </ul>"},{"location":"changelog/#changed_1","title":"Changed","text":"<ul> <li>BREAKING CHANGE: Internal resource handling now utilizes <code>importlib.resources</code>,    which makes Python &gt;=3.9 mandatory.</li> <li>BREAKING CHANGE: Some function signatures have been changed:<ul> <li><code>pyratings.get_pure_ratings</code>   --Old--: <code>get_pure_ratings(ratings: Union[pd.Series, List[pd.Series], pd.DataFrame]) -&gt; Union[pd.Series, List[pd.Series], pd.DataFrame]</code>   --New--: <code>get_pure_ratings(ratings: Union[str, pd.Series, pd.DataFrame]) -&gt; Union[str, pd.Series, pd.DataFrame]</code></li> <li><code>pyratings.get_best_ratings</code>   --Old--: <code>get_best_ratings(ratings: Dict[str, pd.Series], tenor: Optional[str] = \"long-term\") -&gt; pd.Series</code>   --New--: <code>get_best_ratings(ratings: pd.DataFrame, rating_provider_input: List[str] = None, rating_provider_output: str = \"S&amp;P\", tenor: str = \"long-term\") -&gt; pd.Series</code></li> <li><code>pyratings.get_second_best_ratings</code>   --Old--: <code>get_second_best_ratings(ratings: Dict[str, pd.Series], tenor: Optional[str] = \"long-term\") -&gt; pd.Series</code>   --New--: <code>get_second_best_ratings(ratings: pd.DataFrame, rating_provider_input: List[str] = None, rating_provider_output: str = \"S&amp;P\", tenor: str = \"long-term\") -&gt; pd.Series</code></li> <li><code>pyratings.get_worst_ratings</code>   --Old--: <code>get_worst_ratings(ratings: Dict[str, pd.Series], tenor: Optional[str] = \"long-term\") -&gt; pd.Series</code>   --New--: <code>get_worst_ratings(ratings: pd.DataFrame, rating_provider_input: List[str] = None, rating_provider_output: str = \"S&amp;P\", tenor: str = \"long-term\") -&gt; pd.Series</code></li> </ul> </li> </ul>"},{"location":"changelog/#removed","title":"Removed","text":"<ul> <li><code>get_rating()</code> -&gt; Use <code>pyratings.get_ratings_from_scores</code> or    <code>pyratings.get_ratings_from_warf</code> instead.</li> <li><code>to_ratings_from_scores()</code> -&gt; Use <code>pyratings.get_ratings_from_scores</code> instead.</li> <li><code>to_scores_from_ratings()</code> -&gt; Use <code>pyratings.get_scores_from_ratings</code> instead.</li> <li><code>to_score_from_warf()</code> -&gt; Use <code>pyratings.get_scores_from_warf</code> instead.</li> <li><code>to_warf_from_ratings()</code> -&gt; Use <code>pyratings.get_warf_from_ratings</code> instead.</li> </ul>"},{"location":"changelog/#042-2021-11-19","title":"0.4.2 - 2021-11-19","text":""},{"location":"changelog/#refactored_2","title":"Refactored","text":"<ul> <li>Added unit tests in order to arrive at 100% code coverage</li> </ul>"},{"location":"changelog/#041-2021-11-16","title":"0.4.1 - 2021-11-16","text":""},{"location":"changelog/#changed_2","title":"Changed","text":"<ul> <li>Function signature of <code>pyratings.get_pure_ratings</code>.</li> </ul>"},{"location":"changelog/#040-2021-03-26","title":"0.4.0 - 2021-03-26","text":""},{"location":"changelog/#added_3","title":"Added","text":"<ul> <li>Computation of <code>best</code>, <code>worst</code>, and <code>second_best</code> ratings on a security basis. <ul> <li><code>pyratings.get_best_ratings</code></li> <li><code>pyratings.get_second_best_ratings</code></li> <li><code>pyratings.get_worst_ratings</code></li> </ul> </li> <li>Computation of WARF buffer, i.e. distance from current WARF to the next maxWARF. <ul> <li><code>pyratings.get_warf_buffer</code></li> </ul> </li> <li>Documentation<ul> <li>Overview</li> <li>Getting started</li> <li>API Reference</li> </ul> </li> </ul>"},{"location":"changelog/#improved_3","title":"Improved","text":"<ul> <li>Updated docstrings.</li> <li><code>doctest</code> integration into <code>pytest</code>.</li> </ul>"},{"location":"changelog/#changed_3","title":"Changed","text":"<ul> <li>Some functions such as <code>to_scores_from_ratings</code> and <code>get_pure_ratings</code> got    their signatures changed.   They now accept a <code>Dict[str, pd.Series]</code>, where the dictionary keys represent    the rating provider and the dictionary values represent the respective ratings.    This will allow transforming multiple columns of a <code>pd.DataFrame</code> in one step.</li> <li>\"S&amp;P\" and \"Moody's\" are not no valid rating provider anymore. The new acronyms are    \"SP\" and \"Moody\".</li> <li><code>pyratings.get_pure_ratings</code> output column names now have the suffix \"_clean\".</li> <li><code>to_ratings_from_scores</code> became an internal function.</li> <li><code>get_rating</code> is now the go-to function when it comes to translate a single    rating score or numerical WARF into a rating. It replaces    <code>to_ratings_from_avg_warf</code> and <code>get_avg_rating</code>.</li> <li><code>get_avg_rating_score</code> and <code>get_avg_warf</code> shared the exact same code. These    functions have been merged into <code>get_weighted_average</code>.</li> <li>Internal code optimizations.</li> </ul>"},{"location":"changelog/#removed_1","title":"Removed","text":"<ul> <li><code>get_avg_rating</code></li> <li><code>get_avg_rating_score</code></li> <li><code>get_avg_warf</code></li> <li><code>to_ratings_from_avg_warf</code></li> <li><code>to_ratings_from_warf</code></li> </ul>"},{"location":"changelog/#fixed_1","title":"Fixed","text":"<ul> <li><code>get_weighted_average</code> (previously <code>get_avg_rating_score</code> and <code>get_avg_warf</code>)   now handle missing rating scores/WARF differently. Previously, they have been    ignored. However, this led to a too positive average rating/WARF.   Now, only securities with a rating score/WARF available will contribute to the    average computation. To put it differently, the average score/WARF is solely based    on rated securities.</li> </ul>"},{"location":"changelog/#030-2021-02-22","title":"0.3.0 - 2021-02-22","text":""},{"location":"changelog/#added_4","title":"Added","text":"<ul> <li>Computation of average rating.</li> <li>Computation of average WARF.</li> <li>Translation from traditional ratings to WARF and vice versa.</li> </ul>"},{"location":"changelog/#changed_4","title":"Changed","text":"<ul> <li>Adjusted WARF and MaxWARF values for ratings Ca and C to allow for differentiation    of translated values between ratings Ca/C/D.</li> <li>Folder layout now adheres to <code>src</code> layout.</li> <li>Package resource management now using <code>pkg_resources</code> from Python's standard    library.</li> </ul>"},{"location":"changelog/#improved_4","title":"Improved","text":"<ul> <li>Use <code>tox</code> for unit tests.</li> </ul>"},{"location":"changelog/#020-2020-12-18","title":"0.2.0 - 2020-12-18","text":""},{"location":"changelog/#added_5","title":"Added","text":"<ul> <li>More rating agencies: DBRS, Bloomberg composite, ICE.</li> <li>Short-term ratings.</li> </ul>"},{"location":"changelog/#improved_5","title":"Improved","text":"<ul> <li>Rating scales are now maintained within an SQLite database. Previously, rating    scales had been hard coded in a traditional Python <code>dict</code>.</li> </ul>"},{"location":"changelog/#fixed_2","title":"Fixed","text":"<ul> <li>Cleansing of unsolicited ratings.</li> </ul>"},{"location":"changelog/#010-2020-12-09","title":"0.1.0 - 2020-12-09","text":""},{"location":"changelog/#added_6","title":"Added","text":"<ul> <li>Function to clean ratings (delete watches).</li> <li>Function to translate S&amp;P/Fitch/Moody's credit ratings into rating scores.</li> <li>Function to translate rating scores into S&amp;P/Fitch/Moody's credit ratings.</li> </ul>"},{"location":"code_of_conduct/","title":"Code of Conduct \u2014 pyratings","text":""},{"location":"code_of_conduct/#our-pledge","title":"Our Pledge","text":"<p>In the interest of fostering an open and welcoming environment, we as contributors and maintainers pledge to make participation in our project and our community a harassment-free experience for everyone, regardless of age, body size, disability, ethnicity, sex characteristics, gender identity and expression, level of experience, education, socio-economic status, nationality, personal appearance, race, religion, or sexual identity and orientation.</p>"},{"location":"code_of_conduct/#our-standards","title":"Our Standards","text":"<p>Examples of behavior that contributes to a positive environment for our community include:</p> <ul> <li>Demonstrating empathy and kindness toward other people</li> <li>Being respectful of differing opinions, viewpoints, and experiences</li> <li>Giving and gracefully accepting constructive feedback</li> <li>Accepting responsibility and apologizing to those affected by our mistakes,   and learning from the experience</li> <li>Focusing on what is best, not just for us as individuals, but for the overall    community</li> </ul> <p>Examples of unacceptable behavior include:</p> <ul> <li>The use of sexualized language or imagery, and sexual attention or   advances</li> <li>Trolling, insulting or derogatory comments, and personal or political attacks</li> <li>Public or private harassment</li> <li>Publishing others' private information, such as a physical or email   address, without their explicit permission</li> <li>Other conduct which could reasonably be considered inappropriate in a   professional setting</li> </ul>"},{"location":"code_of_conduct/#our-responsibilities","title":"Our Responsibilities","text":"<p>Project maintainers are responsible for clarifying and enforcing our standards of acceptable behavior and will take appropriate and fair corrective action in response to any instances of unacceptable behavior.</p> <p>Project maintainers have the right and responsibility to remove, edit, or reject comments, commits, code, wiki edits, issues, and other contributions that are not aligned to this Code of Conduct, or to ban temporarily or permanently any contributor for other behaviors that they deem inappropriate, threatening, offensive, or harmful.</p>"},{"location":"code_of_conduct/#scope","title":"Scope","text":"<p>This Code of Conduct applies within all community spaces, and also applies when an individual is officially representing the community in public spaces. Examples of representing our community include using an official e-mail address, posting via an official social media account, or acting as an appointed representative at an online or offline event.</p>"},{"location":"code_of_conduct/#enforcement","title":"Enforcement","text":"<p>Instances of abusive, harassing, or otherwise unacceptable behavior may be reported to the community leaders responsible for enforcement at opensource@hsbc.com. All complaints will be reviewed and investigated promptly and fairly.</p> <p>All community leaders are obligated to respect the privacy and security of the reporter of any incident.</p>"},{"location":"code_of_conduct/#attribution","title":"Attribution","text":"<p>This Code of Conduct is adapted from the Contributor Covenant, version 1.4 and 2.0, and was generated by contributing-gen.</p>"},{"location":"contributing/","title":"Contributing","text":""},{"location":"contributing/#contributing-to-pyratings","title":"Contributing to pyratings","text":"<p>First off, thanks for taking the time to contribute! \u2764\ufe0f</p> <p>All types of contributions are encouraged and valued. See the Table of Contents for different ways to help and details about how this project handles them. Please make sure to read the relevant section before making your contribution. It will make it a lot easier for us maintainers and smooth out the experience for all involved. The community looks forward to your contributions. \ud83c\udf89</p> <p>And if you like the project, but just don't have time to contribute, that's fine. There are other easy ways to support the project and show your appreciation, which we would also be very happy about:</p> <ul> <li>Star the project</li> <li>Tweet about it</li> <li>Refer this project in your project's README</li> <li>Mention the project at local meetups and tell your friends/colleagues</li> </ul>"},{"location":"contributing/#table-of-contents","title":"Table of Contents","text":"<ul> <li>Code of Conduct</li> <li>I Have a Question</li> <li>I Want To Contribute<ul> <li>Reporting Bugs</li> <li>Suggesting Enhancements</li> <li>Your First Code Contribution</li> <li>Improving The Documentation</li> </ul> </li> <li>Style guides<ul> <li>Code formatting</li> <li>Linting</li> <li>Commit Messages</li> </ul> </li> <li>Attribution</li> </ul>"},{"location":"contributing/#code-of-conduct","title":"Code of Conduct","text":"<p>This project and everyone participating in it is governed by the pyratings Code of Conduct. By participating, you are expected to uphold this code. Please report unacceptable behavior to opensource@hsbc.com.</p>"},{"location":"contributing/#i-have-a-question","title":"I Have a Question","text":"<p>If you want to ask a question, we assume that you have read the available Documentation.</p> <p>Before you ask a question, it is best to search for existing Issues that might help you. In case you have found a suitable issue and still need clarification, you can write  your question in this issue.</p> <p>If you then still feel the need to ask a question and need clarification, we recommend the following:</p> <ul> <li>Open a new Issue.</li> <li>Provide as much context as you can about what you're running into.</li> <li>Provide project and platform versions (Python version etc.), depending on what seems    relevant.</li> <li>Attach the \"question\" label to your newly created issue.</li> </ul> <p>We will then take care of the issue as soon as possible.</p>"},{"location":"contributing/#i-want-to-contribute","title":"I Want To Contribute","text":""},{"location":"contributing/#legal-notice","title":"Legal Notice","text":"<p>When contributing to this project, you must agree that you have authored 100% of the content, that you have the necessary rights to the content and that the content you contribute may be provided under the project license.</p>"},{"location":"contributing/#reporting-bugs","title":"Reporting Bugs","text":""},{"location":"contributing/#before-submitting-a-bug-report","title":"Before Submitting a Bug Report","text":"<p>A good bug report shouldn't leave others needing to chase you up for more information. Therefore, we ask you to investigate carefully, collect information and describe the issue in detail in your report. Please complete the following steps in advance to help us fix any potential bug as fast as possible.</p> <ul> <li>Make sure that you are using the latest version.</li> <li>Determine if your bug is really a bug and not an error on your side, e.g. using    incompatible environment components/versions (Make sure that you have read the    documentation. If you are looking for support,   you might want to check this section).</li> <li>To see if other users have experienced (and potentially already solved) the same    issue you are having, check if there is not already a bug report existing for your    bug or error in the   bug tracker.</li> <li>Collect information about the bug:</li> <li>Stack trace (Traceback).</li> <li>OS, Platform and Version (Windows, Linux, macOS, x86, ARM).</li> <li>Version of the interpreter, compiler, SDK, runtime environment, package manager,      depending on what seems relevant.</li> <li>Possibly your input and the output.</li> <li>Can you reliably reproduce the issue? And can you also reproduce it with older      versions?</li> </ul>"},{"location":"contributing/#how-do-i-submit-a-good-bug-report","title":"How Do I Submit a Good Bug Report?","text":"<p>You must never report security related issues, vulnerabilities or bugs including  sensitive information to the issue tracker, or elsewhere in public. Instead,  sensitive bugs must be sent by email to opensource@hsbc.com.</p> <p>We use GitHub issues to track bugs and errors. If you run into an issue with the project:</p> <ul> <li>Open an Issue. (Since we can't be    sure at this point whether it is a bug or not, we ask you not to talk about a bug    yet and not to label the issue.)</li> <li>Explain the behavior you would expect and the actual behavior.</li> <li>Please provide as much context as possible and describe the reproduction steps    that someone else can follow to recreate the issue on their own. This usually    includes your code. For good bug reports, you should isolate the problem and create    a reduced test case.</li> <li>Provide the information you collected in the previous section.</li> </ul> <p>Once it's filed:</p> <ul> <li>The project team will label the issue accordingly.</li> <li>A team member will try to reproduce the issue with your provided steps. If there    are no reproduction steps or no obvious way to reproduce the issue, the team will    ask you for those steps and mark the issue as <code>needs-repro</code>. Bugs with the    <code>needs-repro</code> tag will not be addressed until they are reproduced.</li> <li>If the team is able to reproduce the issue, it will be marked <code>needs-fix</code>, as well    as possibly other tags (such as <code>critical</code>), and the issue will be left to be    implemented by someone.</li> </ul>"},{"location":"contributing/#suggesting-enhancements","title":"Suggesting Enhancements","text":"<p>This section guides you through submitting an enhancement suggestion for pyratings, including completely new features and minor improvements to existing functionality. Following these guidelines will help maintainers and the community to understand your suggestion and find related suggestions.</p>"},{"location":"contributing/#before-submitting-an-enhancement","title":"Before Submitting an Enhancement","text":"<ul> <li>Make sure that you are using the latest version.</li> <li>Read the documentation carefully and find out    if the functionality is already covered.</li> <li>Perform a search to see if the    enhancement has already been suggested. If it has, add a comment to the existing    issue instead of opening a new one.</li> <li>Find out whether your idea fits with the scope and aims of the project. It's up to    you to make a strong case to convince the project's developers of the merits of    this feature.</li> </ul>"},{"location":"contributing/#how-do-i-submit-a-good-enhancement-suggestion","title":"How Do I Submit a Good Enhancement Suggestion?","text":"<p>Enhancement suggestions are tracked as GitHub issues.</p> <ul> <li>Use a clear and descriptive title for the issue to identify the suggestion.</li> <li>Use feat: as a prefix, e.g. \"feat: Add awesome enhancement\".</li> <li>Provide a step-by-step description of the suggested enhancement in as many    details as possible.</li> <li>Describe the current behavior and explain which behavior you expected to see    instead and why. At this point, you can also tell which alternatives do not work    for you.</li> <li>You may want to include screenshots and animated GIFs which help you    demonstrate the steps or point out the part which the suggestion is related to. </li> <li>Explain why this enhancement would be useful to most pyratings users. You may    also want to point out other projects that solved it better and which could serve    as inspiration.</li> </ul>"},{"location":"contributing/#your-first-code-contribution","title":"Your First Code Contribution","text":"<p>GitHub provides a good introduction on how to contribute to an open source project. In a nutshell, the process involves the following steps:</p> <ol> <li>Fork (i.e. copy) the repository to your own GitHub account.</li> <li>Clone the fork to your local machine.</li> <li>Create a new branch to work on.</li> <li>Commit and push your changes to your own GitHub.</li> <li>Create the Pull Request.</li> </ol>"},{"location":"contributing/#how-do-i-set-up-my-dev-environment","title":"How do I set up my dev environment?","text":"<ul> <li>pyratings requires Python 3.10 at a minimum.</li> <li>Clone the fork to your local machine.</li> <li>Create a virtual environment and install the pyratings library including all of    its dependencies.   There are some possible ways to do this.</li> </ul> <p>pyratings is using the Python dependency manager uv. All required and development dependencies are defined in <code>pyproject.toml</code>.</p> <pre><code>uv sync --dev\n</code></pre> <p>This will install pyratings including all its development dependencies.</p>"},{"location":"contributing/#further-dev-setup-and-what-i-need-to-now-about-pre-commit","title":"Further dev setup and what I need to now about \"pre-commit\"","text":"<p>The pyratings package adheres to a bunch of Style guides, that  will be enforced with the help of Pre-commit. </p> <p>Before you commit your code changes, you should make sure, that you only commit code  that is of good quality and adheres to the projects Style guides. <code>pre-commit</code> hooks run all the auto-formatters, linters, and other quality checks to make sure the changeset is in good shape before a commit/push happens. If it finds  any issues with your code, <code>pre-commit</code> will prevent the actual commit. You then  have the chance to fix all issues and re-commit your code changes. </p> <p>You can install the hooks with (runs for each commit):</p> <pre><code>uv run pre-commit install\n</code></pre> <p>Or if you want them to run only for each push:</p> <pre><code>uv run pre-commit install -t pre-push\n</code></pre> <p>Or if you want to run all checks manually for all files:</p> <pre><code>uv run pre-commit run --all-files\n</code></pre>"},{"location":"contributing/#how-do-i-execute-unit-tests","title":"How do I execute unit tests?","text":"<p>Running simple unit tests using <code>pytest</code> is as easy as</p> <pre><code>uv run pytest\n</code></pre> <p>In addition, you can perform more rigorous linting and tests against multiple Python versions. In this case, the test result depends on the Python versions available on  your machine. Make sure you've got at least Python 3.10 installed on your machine. </p> <p>These tests will be performed using nox. The corresponding <code>./noxfile.py</code> is configured in a way that it installs the  required dependencies with the help of pdm. That means, you need to have pdm installed on your machine. Then simply run:</p> <pre><code>uv run nox\n</code></pre> <p>If all tests pass, you should get a result comparable to this:</p> <pre><code>nox &gt; Ran multiple sessions:\nnox &gt; * pre-commit-3.10: success\nnox &gt; * pre-commit-3.11: success\nnox &gt; * pre-commit-3.12: success\nnox &gt; * pre-commit-3.13: success\nnox &gt; * tests-3.10: success\nnox &gt; * tests-3.11: success\nnox &gt; * tests-3.12: success\nnox &gt; * tests-3.13: success\n</code></pre>"},{"location":"contributing/#improving-the-documentation","title":"Improving The Documentation","text":"<p>The documentation is completely written in Markdown. Utilizing the mkdocs and mkdocstrings libraries, the content will be generated automatically from the docs directory  and from the docstrings of the public signatures of the source code.</p> <p>There is always room for improvement. So, if you feel something isn't as clear  described as it should be, please don't hesitate to open an  Issue. Also, please attach the  documentation label to it in order to make the maintainers' life a bit easier.</p>"},{"location":"contributing/#style-guides","title":"Style guides","text":""},{"location":"contributing/#code-formatting","title":"Code formatting","text":"<p>This project uses the ruff formatter to  automatically format the code basis. The line length has been set to 88 characters.</p>"},{"location":"contributing/#linting","title":"Linting","text":"<p>We use ruff as our tool of choice for style  guide enforcement. That means, contributors should adhere to the following points  (not exhaustive):</p> <ul> <li>Every module must have a docstring to describe what the module is all about.</li> <li>Every function signature should have type hints as well as return values.</li> <li>Every function must have a docstring in   numpy format.</li> </ul>"},{"location":"contributing/#commit-messages","title":"Commit Messages","text":"<p>This project follows the Conventional Commits specification. This will help us to automatically generate the CHANGELOG.</p>"},{"location":"contributing/#attribution","title":"Attribution","text":"<p>This guide is based on the contributing-gen. Make your own!</p>"},{"location":"license/","title":"License","text":"<pre><code>                             Apache License\n                       Version 2.0, January 2004\n                    http://www.apache.org/licenses/\n</code></pre> <p>TERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION</p> <ol> <li> <p>Definitions.</p> <p>\"License\" shall mean the terms and conditions for use, reproduction,   and distribution as defined by Sections 1 through 9 of this document.</p> <p>\"Licensor\" shall mean the copyright owner or entity authorized by   the copyright owner that is granting the License.</p> <p>\"Legal Entity\" shall mean the union of the acting entity and all   other entities that control, are controlled by, or are under common   control with that entity. For the purposes of this definition,   \"control\" means (i) the power, direct or indirect, to cause the   direction or management of such entity, whether by contract or   otherwise, or (ii) ownership of fifty percent (50%) or more of the   outstanding shares, or (iii) beneficial ownership of such entity.</p> <p>\"You\" (or \"Your\") shall mean an individual or Legal Entity   exercising permissions granted by this License.</p> <p>\"Source\" form shall mean the preferred form for making modifications,   including but not limited to software source code, documentation   source, and configuration files.</p> <p>\"Object\" form shall mean any form resulting from mechanical   transformation or translation of a Source form, including but   not limited to compiled object code, generated documentation,   and conversions to other media types.</p> <p>\"Work\" shall mean the work of authorship, whether in Source or   Object form, made available under the License, as indicated by a   copyright notice that is included in or attached to the work   (an example is provided in the Appendix below).</p> <p>\"Derivative Works\" shall mean any work, whether in Source or Object   form, that is based on (or derived from) the Work and for which the   editorial revisions, annotations, elaborations, or other modifications   represent, as a whole, an original work of authorship. For the purposes   of this License, Derivative Works shall not include works that remain   separable from, or merely link (or bind by name) to the interfaces of,   the Work and Derivative Works thereof.</p> <p>\"Contribution\" shall mean any work of authorship, including   the original version of the Work and any modifications or additions   to that Work or Derivative Works thereof, that is intentionally   submitted to Licensor for inclusion in the Work by the copyright owner   or by an individual or Legal Entity authorized to submit on behalf of   the copyright owner. For the purposes of this definition, \"submitted\"   means any form of electronic, verbal, or written communication sent   to the Licensor or its representatives, including but not limited to   communication on electronic mailing lists, source code control systems,   and issue tracking systems that are managed by, or on behalf of, the   Licensor for the purpose of discussing and improving the Work, but   excluding communication that is conspicuously marked or otherwise   designated in writing by the copyright owner as \"Not a Contribution.\"</p> <p>\"Contributor\" shall mean Licensor and any individual or Legal Entity   on behalf of whom a Contribution has been received by Licensor and   subsequently incorporated within the Work.</p> </li> <li> <p>Grant of Copyright License. Subject to the terms and conditions of       this License, each Contributor hereby grants to You a perpetual,       worldwide, non-exclusive, no-charge, royalty-free, irrevocable       copyright license to reproduce, prepare Derivative Works of,       publicly display, publicly perform, sublicense, and distribute the       Work and such Derivative Works in Source or Object form.</p> </li> <li> <p>Grant of Patent License. Subject to the terms and conditions of       this License, each Contributor hereby grants to You a perpetual,       worldwide, non-exclusive, no-charge, royalty-free, irrevocable       (except as stated in this section) patent license to make, have made,       use, offer to sell, sell, import, and otherwise transfer the Work,       where such license applies only to those patent claims licensable       by such Contributor that are necessarily infringed by their       Contribution(s) alone or by combination of their Contribution(s)       with the Work to which such Contribution(s) was submitted. If You       institute patent litigation against any entity (including a       cross-claim or counterclaim in a lawsuit) alleging that the Work       or a Contribution incorporated within the Work constitutes direct       or contributory patent infringement, then any patent licenses       granted to You under this License for that Work shall terminate       as of the date such litigation is filed.</p> </li> <li> <p>Redistribution. You may reproduce and distribute copies of the       Work or Derivative Works thereof in any medium, with or without       modifications, and in Source or Object form, provided that You       meet the following conditions:</p> <p>(a) You must give any other recipients of the Work or       Derivative Works a copy of this License; and</p> <p>(b) You must cause any modified files to carry prominent notices       stating that You changed the files; and</p> <p>(c) You must retain, in the Source form of any Derivative Works       that You distribute, all copyright, patent, trademark, and       attribution notices from the Source form of the Work,       excluding those notices that do not pertain to any part of       the Derivative Works; and</p> <p>(d) If the Work includes a \"NOTICE\" text file as part of its       distribution, then any Derivative Works that You distribute must       include a readable copy of the attribution notices contained       within such NOTICE file, excluding those notices that do not       pertain to any part of the Derivative Works, in at least one       of the following places: within a NOTICE text file distributed       as part of the Derivative Works; within the Source form or       documentation, if provided along with the Derivative Works; or,       within a display generated by the Derivative Works, if and       wherever such third-party notices normally appear. The contents       of the NOTICE file are for informational purposes only and       do not modify the License. You may add Your own attribution       notices within Derivative Works that You distribute, alongside       or as an addendum to the NOTICE text from the Work, provided       that such additional attribution notices cannot be construed       as modifying the License.</p> <p>You may add Your own copyright statement to Your modifications and   may provide additional or different license terms and conditions   for use, reproduction, or distribution of Your modifications, or   for any such Derivative Works as a whole, provided Your use,   reproduction, and distribution of the Work otherwise complies with   the conditions stated in this License.</p> </li> <li> <p>Submission of Contributions. Unless You explicitly state otherwise,       any Contribution intentionally submitted for inclusion in the Work       by You to the Licensor shall be under the terms and conditions of       this License, without any additional terms or conditions.       Notwithstanding the above, nothing herein shall supersede or modify       the terms of any separate license agreement you may have executed       with Licensor regarding such Contributions.</p> </li> <li> <p>Trademarks. This License does not grant permission to use the trade       names, trademarks, service marks, or product names of the Licensor,       except as required for reasonable and customary use in describing the       origin of the Work and reproducing the content of the NOTICE file.</p> </li> <li> <p>Disclaimer of Warranty. Unless required by applicable law or       agreed to in writing, Licensor provides the Work (and each       Contributor provides its Contributions) on an \"AS IS\" BASIS,       WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or       implied, including, without limitation, any warranties or conditions       of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A       PARTICULAR PURPOSE. You are solely responsible for determining the       appropriateness of using or redistributing the Work and assume any       risks associated with Your exercise of permissions under this License.</p> </li> <li> <p>Limitation of Liability. In no event and under no legal theory,       whether in tort (including negligence), contract, or otherwise,       unless required by applicable law (such as deliberate and grossly       negligent acts) or agreed to in writing, shall any Contributor be       liable to You for damages, including any direct, indirect, special,       incidental, or consequential damages of any character arising as a       result of this License or out of the use or inability to use the       Work (including but not limited to damages for loss of goodwill,       work stoppage, computer failure or malfunction, or any and all       other commercial damages or losses), even if such Contributor       has been advised of the possibility of such damages.</p> </li> <li> <p>Accepting Warranty or Additional Liability. While redistributing       the Work or Derivative Works thereof, You may choose to offer,       and charge a fee for, acceptance of support, warranty, indemnity,       or other liability obligations and/or rights consistent with this       License. However, in accepting such obligations, You may act only       on Your own behalf and on Your sole responsibility, not on behalf       of any other Contributor, and only if You agree to indemnify,       defend, and hold each Contributor harmless for any liability       incurred by, or claims asserted against, such Contributor by reason       of your accepting any such warranty or additional liability.</p> </li> </ol> <p>END OF TERMS AND CONDITIONS</p> <p>APPENDIX: How to apply the Apache License to your work.</p> <pre><code>  To apply the Apache License to your work, attach the following\n  boilerplate notice, with the fields enclosed by brackets \"[]\"\n  replaced with your own identifying information. (Don't include\n  the brackets!)  The text should be enclosed in the appropriate\n  comment syntax for the file format. We also recommend that a\n  file or class name and description of purpose be included on the\n  same \"printed page\" as the copyright notice for easier\n  identification within third-party archives.\n</code></pre> <p>Copyright [yyyy][name of copyright owner]</p> <p>Licensed under the Apache License, Version 2.0 (the \"License\");    you may not use this file except in compliance with the License.    You may obtain a copy of the License at</p> <pre><code>   https://www.apache.org/licenses/LICENSE-2.0\n</code></pre> <p>Unless required by applicable law or agreed to in writing, software    distributed under the License is distributed on an \"AS IS\" BASIS,    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.    See the License for the specific language governing permissions and    limitations under the License.</p>"},{"location":"long_term_ratings/","title":"Long-term ratings","text":"<p>A credit rating is an evaluation of the credit risk of a prospective debtor (an  individual, a business, company or a government), predicting their ability to pay  back the debt, and an implicit forecast of the likelihood of the debtor defaulting.  The credit rating represents an evaluation of a credit rating agency of the  qualitative and quantitative information for the prospective debtor, including  information provided by the prospective debtor and other non-public information  obtained by the credit rating agency's analysts.<sup>1</sup></p> <p>pyratings supports the four main rating agencies, namely</p> <ul> <li>Moody's</li> <li>Standard &amp; Poors</li> <li>Fitch</li> <li>DBRS</li> </ul> <p>The rating scales of each of these rating agencies differ only slightly (see table  below). pyratings also supports Bloomberg ratings, whereby Bloomberg isn't an actual  rating agency. However, Bloomberg provides a composite rating, which is a blend of  Moody's, S&amp;P's, Fitch's, and DBRS' rating for a particular security.</p> <p>When working with ratings, you will get to a point where you need to do some  \"computations\". For example, comparing different ratings across different agencies  makes it necessary to translate human-readable ratings into numerical rating scores.  It's always easier to compare numbers rather than plain text. The following table shows  all ratings including equivalent rating scores.</p> <p></p> <ol> <li> <p>https://en.wikipedia.org/wiki/Credit_rating \u21a9</p> </li> </ol>"},{"location":"short_term_ratings/","title":"Short-term ratings","text":"<p>Rating agencies publish short-term ratings in order to express a company's ability  to repay debt that matures within the next twelve months. A rating scale  representing short-term ratings looks somewhat different compared to a long-term  rating scale. Also, the rating scales differ when compared across different rating  agencies.</p>"},{"location":"short_term_ratings/#rating-scales","title":"Rating scales","text":"<p>When looking at the short-term rating scales, S&amp;P and Fitch are quite comparable.  However, Moody's and especially DBRS's rating scales are different. This makes it hard to compare short-term ratings across agencies.</p> <p></p>"},{"location":"short_term_ratings/#comparing-ratings","title":"Comparing ratings","text":"<p>Let's say we want to compute the average short-term rating across all securities  within a portfolio. As a matter of fact, most of the time, not all securities in  a portfolio do possess a short-term rating from one particular rating agency. If you  are lucky, all securities might have at least one short-term rating, but potentially  from different rating agencies. While security A might have a rating from S&amp;P and  Fitch, security B and C might have a rating from Moody's or DBRS, if at all.</p> <p>If we were talking about long-term ratings, the path to go seems clear:</p> <ul> <li>Translate the ratings into numerical rating scores</li> <li>Compute the sum-product of the individual security weights and the rating scores</li> <li>Translate the outcome back to a human-readable rating.</li> </ul> <p>With short-term ratings, it's not that easy. The reason is the difference in rating  scales. These differ in length, which means even if we attach a rating score to a  particular rating, the scores are not comparable among different rating agencies.</p> <p>Now, one way to solve that problem is to take into consideration that a company's  short-term rating has a tight relationship with its long-term rating. The different  rating agencies describe this relationship as follows:</p> <p></p> <p>The main idea is to determine an equivalent long-term rating score  for every short-term rating. It's probably best to use an example to show what it  looks like.</p> <p>Taking Moody's rating scale, it is obvious that a short-term rating of P-1 is  equivalent to a long-term rating between Aaa and A2. Or, to express it in terms of  equivalent long-term rating scores, a rating of P-1 is equivalent to long-term  rating scores between 1 and 6. Going with S&amp;P, an A-1+ rating has an equivalent  long-term rating score between 1 and 4.</p> <p>To compare ratings across agencies, we need a clear-cut relationship between the  human-readable rating and its corresponding rating score. Something like having a  score between 1 and 6 isn't helpful at all. So, what to do? We could take the average of the rating scores and assign this average equivalent value (AEV) to the respective short-term rating. For Moody's, a P-1 rating will have assigned an AEV of 3.5 (average of 1 and 6). An A-1+ rating would be equivalent to an AEV of 2.5 (average of 1 and 4).</p> <p>Once you assign a concrete short-term rating score (AEV) to every security in your  portfolio, your problem has basically been solved. From here on, the process is the  same as when working with long-term ratings.</p>"},{"location":"short_term_ratings/#theres-one-more-catch","title":"There's one more catch...","text":"<p>All rating agencies' work with some overlaps in their rating scales. For example,  Moody's usually assigns a short-term rating of P-1 to an A2-rated company. However,  Moody's reserves itself the right to assign a short-term rating of P-2, if the  rating agency concludes that the liquidity situation of this particular company is not  compatible with a P-1 rating. In other words, even if this company has been rated A2  from a long-term perspective, there might be some issues that the company has to  deal with during the next twelve months and these issues might have greater risks  attached to it. On the flip side, consider a company with an A3 rating. It would usually get  assigned a rating of P-2. However, there might be situations where the rating agency  concludes that the liquidity outlook is somewhat better, which justifies the  assignment of a P-1 short-term rating.</p> <p>Different rating agencies have different overlapping areas. Here's the full picture:</p> <p></p> <p>Well, now we have a problem. Let's say you have a long-term rating score of 6.  What's the correct short-term rating? \u2014 The answer is: You can't tell. It could be  P-1 or P-2 (in terms of Moody's). Having said this, P-1 is still the most likely  outcome. Anyway, at that stage, you have to make up your mind and take a decision. Remember,  there's no right or wrong, just different ways of getting the job done.</p> <p>pyratings offers three distinct strategies in order to translate a long-term  rating score into a short-term rating.</p> <ul> <li>Strategy 1 (best):   You always choose the best possible short-term rating. In the case of a rating    score of 7, that would translate into a short-term rating of P-1.   That's the optimistic approach.</li> <li>Strategy 2 (base):   You always choose the short-term rating that a rating agency would usually assign    if there aren't any special liquidity issues (positive or negative). In that case,    a rating score of 6 translates into a P-1 rating, while a rating score of 7 would    translate into a P-2 short-term rating.   That's the base-case approach.</li> <li>Strategy 3 (worst):   You always choose the worst possible short-term rating. In the case of a rating    score of 6, that would translate into a short-term rating of P-2.   That's the conservative approach.</li> </ul> <p>pyratings's default strategy is strategy 2 (base) as it is probably the  best fit for most situations.</p> <p>Here's a summary of all possible translations depending on the chosen strategy.</p> <p></p> <p>One of the advantages of using different strategies is to avoid any overlapping  ranges. Every short-term rating has a one-to-one relationship with an equivalent  long-term rating. This makes the translation from a human-readable rating into a  rating score a clear-cut.</p>"},{"location":"case_studies/avg_port_lt_rtg/","title":"Compute portfolio average long-term rating","text":"In\u00a0[1]: Copied! <pre>import pandas as pd\n\nimport pyratings as rtg\n\nport_df = pd.read_excel(\"portfolio.xlsx\", sheet_name=\"long_term_ratings_worst\")\nport_df.head()\n</pre> import pandas as pd  import pyratings as rtg  port_df = pd.read_excel(\"portfolio.xlsx\", sheet_name=\"long_term_ratings_worst\") port_df.head() Out[1]: ISIN weight worst_rtg 0 ISIN00000001 0.518515 AAA 1 ISIN00000002 0.950810 AA+ 2 ISIN00000003 0.497176 AA 3 ISIN00000004 0.648453 AA- 4 ISIN00000005 0.674328 AA- In\u00a0[2]: Copied! <pre>port_scores_df = pd.concat(\n    [\n        port_df,\n        rtg.get_scores_from_ratings(\n            ratings=port_df[\"worst_rtg\"], rating_provider=\"S&amp;P\"\n        ),\n    ],\n    axis=1,\n)\n\nport_scores_df\n</pre> port_scores_df = pd.concat(     [         port_df,         rtg.get_scores_from_ratings(             ratings=port_df[\"worst_rtg\"], rating_provider=\"S&amp;P\"         ),     ],     axis=1, )  port_scores_df Out[2]: ISIN weight worst_rtg rtg_score_worst_rtg 0 ISIN00000001 0.518515 AAA 1.0 1 ISIN00000002 0.950810 AA+ 2.0 2 ISIN00000003 0.497176 AA 3.0 3 ISIN00000004 0.648453 AA- 4.0 4 ISIN00000005 0.674328 AA- 4.0 ... ... ... ... ... 82 ISIN00000083 2.321185 BBB+ 8.0 83 ISIN00000084 1.389043 BBB+ 8.0 84 ISIN00000085 2.296711 BBB+ 8.0 85 ISIN00000086 1.015105 AAA 1.0 86 ISIN00000087 0.964399 AA 3.0 <p>87 rows \u00d7 4 columns</p> <p>Here, the <code>get_scores_from_ratings</code> function has been used to translate the worst_rtg column into numerical scores. That is, we used a column that has already been consolidated.</p> <p>pyratings offers some convenience functions that consolidate multiple ratings and directly compute the respective numerical rating scores. These functions are</p> <ul> <li><code>get_best_scores</code></li> <li><code>get_second_best_scores</code></li> <li><code>get_worst_scores</code></li> </ul> <p>Finally, we need to compute a weighted average rating score, which we subsequently convert back into a human-readable rating. For the former, we use the <code>get_weighted_average</code> function and for the latter the <code>get_ratings_from_scores</code> function.</p> In\u00a0[3]: Copied! <pre>avg_rtg_score = rtg.get_weighted_average(\n    data=port_scores_df[\"rtg_score_worst_rtg\"],\n    weights=port_scores_df[\"weight\"] / 100,\n)\n\nprint(f\"Average rating score: {avg_rtg_score:.2f}\")\n</pre> avg_rtg_score = rtg.get_weighted_average(     data=port_scores_df[\"rtg_score_worst_rtg\"],     weights=port_scores_df[\"weight\"] / 100, )  print(f\"Average rating score: {avg_rtg_score:.2f}\") <pre>Average rating score: 4.39\n</pre> In\u00a0[4]: Copied! <pre>avg_rtg = rtg.get_ratings_from_scores(\n    rating_scores=avg_rtg_score, rating_provider=\"S&amp;P\"\n)\n\nprint(f\"Average portfolio rating: {avg_rtg}\")\n</pre> avg_rtg = rtg.get_ratings_from_scores(     rating_scores=avg_rtg_score, rating_provider=\"S&amp;P\" )  print(f\"Average portfolio rating: {avg_rtg}\") <pre>Average portfolio rating: AA-\n</pre> <p>There you go. The average rating of the portfolio is AA-.</p> <p>Do you prefer to show the rating using Moody's rating scale? \u2014 It's as simple as changing the <code>rating_provider</code> argument to \"Moody\".</p> In\u00a0[5]: Copied! <pre>avg_rtg = rtg.get_ratings_from_scores(\n    rating_scores=avg_rtg_score, rating_provider=\"Moody\"\n)\n\nprint(f\"Average portfolio rating: {avg_rtg}\")\n</pre> avg_rtg = rtg.get_ratings_from_scores(     rating_scores=avg_rtg_score, rating_provider=\"Moody\" )  print(f\"Average portfolio rating: {avg_rtg}\") <pre>Average portfolio rating: Aa3\n</pre>"},{"location":"case_studies/avg_port_lt_rtg/#compute-portfolio-average-long-term-rating","title":"Compute portfolio average long-term rating\u00b6","text":"<p>The following case-study demonstrates how to compute the average long-term rating of your portfolio.</p>"},{"location":"case_studies/avg_port_lt_rtg/#preliminary-tasks","title":"Preliminary tasks\u00b6","text":"<p>As a first step, we are going to import a portfolio into a <code>pd.DataFrame</code>. We'll call it <code>port_df</code>. This dataframe comprises a number of securities with respective weights and ratings.</p>"},{"location":"case_studies/avg_port_lt_rtg/#translating-ratings-into-numerical-scores","title":"Translating ratings into numerical scores\u00b6","text":"<p>The column worst_rtg will be used in order to translate the ratings into scores according to the following table.</p> <p></p> <p>We will use <code>get_scores_from_ratings</code> to translate the human-readable ratings into numerical scores. The function needs a rating provider (here: \"S&amp;P\") in order to select an appropriate translation dictionary.</p>"},{"location":"case_studies/avg_port_st_rtg/","title":"Compute portfolio average short-term rating","text":"In\u00a0[1]: Copied! <pre>import pandas as pd\n\nimport pyratings as rtg\n\nport_df = pd.read_excel(\n    \"portfolio.xlsx\",\n    sheet_name=\"short_term_ratings\",\n)\n\nport_df\n</pre> import pandas as pd  import pyratings as rtg  port_df = pd.read_excel(     \"portfolio.xlsx\",     sheet_name=\"short_term_ratings\", )  port_df Out[1]: ISIN weight Moody SP Fitch DBRS 0 ISIN00000001 5.0 P-1 A-1+ F1+ R-1M 1 ISIN00000002 8.5 P-1 A-1 NaN NaN 2 ISIN00000003 2.0 P-1 NaN F2 R-1L 3 ISIN00000004 3.5 P-1 NaN F1+ NaN 4 ISIN00000005 12.0 P-1 NaN NaN R-2M 5 ISIN00000006 3.0 (P)P-1 A-1+ NaN R-2H 6 ISIN00000007 5.4 P-2 A-1 F3 R-1M 7 ISIN00000008 7.6 P-1 A-1+ F1 R-1H 8 ISIN00000009 2.0 P-1 A-1 F1+ NaN 9 ISIN00000010 4.0 P-3 A-1+ F1+ R-1M 10 ISIN00000011 12.0 P-1 A-2 F-1 R-3 11 ISIN00000012 3.0 P-2 A-3 F1 NaN 12 ISIN00000013 7.0 P-1 A-1 F2 R-2L 13 ISIN00000014 8.0 (P)P-1 NaN NaN NaN 14 ISIN00000015 4.0 P-2 A-1 F1+ R-1M 15 ISIN00000016 13.0 P-1 A-1+ F1 R-1H In\u00a0[2]: Copied! <pre>port_df_clean = rtg.get_pure_ratings(\n    ratings=port_df.loc[:, [\"Moody\", \"SP\", \"Fitch\", \"DBRS\"]]\n)\nport_df_clean\n</pre> port_df_clean = rtg.get_pure_ratings(     ratings=port_df.loc[:, [\"Moody\", \"SP\", \"Fitch\", \"DBRS\"]] ) port_df_clean Out[2]: Moody_clean SP_clean Fitch_clean DBRS_clean 0 P-1 A-1+ F1+ R-1M 1 P-1 A-1 NaN NaN 2 P-1 NaN F2 R-1L 3 P-1 NaN F1+ NaN 4 P-1 NaN NaN R-2M 5 P-1 A-1+ NaN R-2H 6 P-2 A-1 F3 R-1M 7 P-1 A-1+ F1 R-1H 8 P-1 A-1 F1+ NaN 9 P-3 A-1+ F1+ R-1M 10 P-1 A-2 F-1 R-3 11 P-2 A-3 F1 NaN 12 P-1 A-1 F2 R-2L 13 P-1 NaN NaN NaN 14 P-2 A-1 F1+ R-1M 15 P-1 A-1+ F1 R-1H In\u00a0[3]: Copied! <pre>port_worst_scores_df = rtg.get_worst_scores(\n    ratings=port_df_clean,\n    rating_provider_input=[\"Moody\", \"SP\", \"Fitch\", \"DBRS\"],\n    tenor=\"short-term\",\n)\n\nport_worst_scores_df = pd.concat(\n    [\n        port_df.loc[:, [\"ISIN\", \"weight\"]],\n        port_worst_scores_df,\n    ],\n    axis=1,\n)\n\nport_worst_scores_df\n</pre> port_worst_scores_df = rtg.get_worst_scores(     ratings=port_df_clean,     rating_provider_input=[\"Moody\", \"SP\", \"Fitch\", \"DBRS\"],     tenor=\"short-term\", )  port_worst_scores_df = pd.concat(     [         port_df.loc[:, [\"ISIN\", \"weight\"]],         port_worst_scores_df,     ],     axis=1, )  port_worst_scores_df Out[3]: ISIN weight worst_scores 0 ISIN00000001 5.0 3.5 1 ISIN00000002 8.5 5.5 2 ISIN00000003 2.0 8.0 3 ISIN00000004 3.5 3.5 4 ISIN00000005 12.0 9.0 5 ISIN00000006 3.0 8.0 6 ISIN00000007 5.4 9.5 7 ISIN00000008 7.6 6.5 8 ISIN00000009 2.0 5.5 9 ISIN00000010 4.0 9.5 10 ISIN00000011 12.0 10.0 11 ISIN00000012 3.0 10.0 12 ISIN00000013 7.0 8.0 13 ISIN00000014 8.0 3.5 14 ISIN00000015 4.0 7.5 15 ISIN00000016 13.0 6.5 In\u00a0[4]: Copied! <pre>avg_rtg_score = rtg.get_weighted_average(\n    data=port_worst_scores_df[\"worst_scores\"],\n    weights=port_worst_scores_df[\"weight\"] / 100,\n)\n\nprint(f\"Average rating score: {avg_rtg_score:.2f}\")\nprint(f\"Average rating score (rounded): {round(avg_rtg_score):.2f}\")\n</pre> avg_rtg_score = rtg.get_weighted_average(     data=port_worst_scores_df[\"worst_scores\"],     weights=port_worst_scores_df[\"weight\"] / 100, )  print(f\"Average rating score: {avg_rtg_score:.2f}\") print(f\"Average rating score (rounded): {round(avg_rtg_score):.2f}\") <pre>Average rating score: 7.23\nAverage rating score (rounded): 7.00\n</pre> In\u00a0[5]: Copied! <pre>avg_rtg_best = rtg.get_ratings_from_scores(\n    rating_scores=avg_rtg_score,\n    rating_provider=\"S&amp;P\",\n    tenor=\"short-term\",\n    short_term_strategy=\"best\",\n)\n\navg_rtg_base = rtg.get_ratings_from_scores(\n    rating_scores=avg_rtg_score,\n    rating_provider=\"S&amp;P\",\n    tenor=\"short-term\",\n    short_term_strategy=\"base\",\n)\n\navg_rtg_worst = rtg.get_ratings_from_scores(\n    rating_scores=avg_rtg_score,\n    rating_provider=\"S&amp;P\",\n    tenor=\"short-term\",\n    short_term_strategy=\"worst\",\n)\n\nprint(f\"Average portfolio rating (strategy: 'best'): {avg_rtg_best}\")\nprint(f\"Average portfolio rating (strategy: 'base'): {avg_rtg_base}\")\nprint(f\"Average portfolio rating (strategy: 'worst'): {avg_rtg_worst}\")\n</pre> avg_rtg_best = rtg.get_ratings_from_scores(     rating_scores=avg_rtg_score,     rating_provider=\"S&amp;P\",     tenor=\"short-term\",     short_term_strategy=\"best\", )  avg_rtg_base = rtg.get_ratings_from_scores(     rating_scores=avg_rtg_score,     rating_provider=\"S&amp;P\",     tenor=\"short-term\",     short_term_strategy=\"base\", )  avg_rtg_worst = rtg.get_ratings_from_scores(     rating_scores=avg_rtg_score,     rating_provider=\"S&amp;P\",     tenor=\"short-term\",     short_term_strategy=\"worst\", )  print(f\"Average portfolio rating (strategy: 'best'): {avg_rtg_best}\") print(f\"Average portfolio rating (strategy: 'base'): {avg_rtg_base}\") print(f\"Average portfolio rating (strategy: 'worst'): {avg_rtg_worst}\") <pre>Average portfolio rating (strategy: 'best'): A-1\nAverage portfolio rating (strategy: 'base'): A-2\nAverage portfolio rating (strategy: 'worst'): A-2\n</pre> <p>There you go. The average rating of the portfolio is either A-1 (<code>best</code>) or A-2 (<code>base</code> and <code>worst</code>).</p>"},{"location":"case_studies/avg_port_st_rtg/#compute-portfolio-average-short-term-rating","title":"Compute portfolio average short-term rating\u00b6","text":"<p>The following case-study demonstrates how to compute the average short-term rating of your portfolio. Before we start looking at a concrete example, let's recap the steps that are necessary to compute the average short-term portfolio rating.</p> <p>Translating short-term ratings into numerical rating scores and vice versa isn't as straightforward as with long-term ratings (see Short-term ratings).</p> <p>The below chart shows the steps to compute the average portfolio rating for a two-security portfolio.</p> <p></p> <ul> <li>Step 1: Translate all short-term ratings from available rating agencies into an average equivalent long-term rating score or into a so-called average equivalent value (AEV).</li> <li>Step 2: Consolidate all ratings on a security basis into one equivalent long-term rating score. For example, you could decide to choose the worst rating (read: highest numerical score) among all rating agencies. As a result, you'll end up with the worst (i.e. highest) AEV per security.</li> <li>Step 3: Compute the weighted AEV for the portfolio. That is, multiply an individual security's weight with its worst AEV. You'll end up with this security's contribution to the portfolio AEV. Finally, sum up the individual securities' contributions. Essentially, this is simply computing the sum-product of the weights and the worst AEVs.</li> <li>Step 4: Translate the portfolio AEV back into a human-readable short-term rating, while using the agency's rating scale of your choice.</li> </ul>"},{"location":"case_studies/avg_port_st_rtg/#preliminary-tasks","title":"Preliminary tasks\u00b6","text":"<p>As a first step, we are going to import a portfolio into a <code>pd.DataFrame</code>. We'll call it <code>port_df</code>. This dataframe comprises a number of securities with respective weights and short-term ratings.</p>"},{"location":"case_studies/avg_port_st_rtg/#clean-ratings","title":"Clean ratings\u00b6","text":"<p>If you take a closer look at row 5 and 13, you see that there are two ratings from Moody's which are based on public information (indicated by \"(P)\"). We need to get rid of this prefix, otherwise the rating can't be correctly identified by pyratings.</p>"},{"location":"case_studies/avg_port_st_rtg/#consolidate-ratings-step-1-and-2","title":"Consolidate ratings (step 1 and 2)\u00b6","text":"<p>Next, we are consolidating the clean ratings. We take the conservative approach and identify the worst numerical rating score assigned to every individual security.</p> <p>We can use the <code>get_worst_scores</code> function. pyratings will automatically convert the short-term ratings into AEVs (step 1) and identify the hightest number (read: worst rating score) (step 2).</p>"},{"location":"case_studies/avg_port_st_rtg/#compute-the-weighted-aev-step-3","title":"Compute the weighted AEV (step 3)\u00b6","text":"<p>Now, we need to compute a weighted average rating score. We use the <code>get_weighted_average</code> function.</p>"},{"location":"case_studies/avg_port_st_rtg/#going-back-to-human-readable-ratings-step-4","title":"Going back to human-readable ratings (step 4)\u00b6","text":"<p>Translating rating scores into short-term ratings is somewhat different compared to long-term ratings (see Short-term ratings). We need to decide which strategy we will use: <code>best</code>, <code>base</code>, or <code>worst</code>. Choosing the strategy influences the outcome. The rounded rating score is 7.</p> <p>We are going to use the <code>get_ratings_from_scores</code> function. The input parameter <code>short_term_strategy</code> defines the strategy, which will be used to translate AEVs back into short-term ratings.</p> <p>The following table describes how this rating score will be translated into a short-term rating depending on the strategy.</p> <p></p>"},{"location":"case_studies/port_warf/","title":"Compute portfolio WARF","text":"In\u00a0[1]: Copied! <pre>import pandas as pd\n\nimport pyratings as rtg\n\nport_df = pd.read_excel(\"portfolio.xlsx\", sheet_name=\"long_term_ratings_worst\")\nport_df.head()\n</pre> import pandas as pd  import pyratings as rtg  port_df = pd.read_excel(\"portfolio.xlsx\", sheet_name=\"long_term_ratings_worst\") port_df.head() Out[1]: ISIN weight worst_rtg 0 ISIN00000001 0.518515 AAA 1 ISIN00000002 0.950810 AA+ 2 ISIN00000003 0.497176 AA 3 ISIN00000004 0.648453 AA- 4 ISIN00000005 0.674328 AA- In\u00a0[2]: Copied! <pre>port_warf_df = pd.concat(\n    [\n        port_df,\n        rtg.get_warf_from_ratings(\n            ratings=port_df[\"worst_rtg\"],\n            rating_provider=\"S&amp;P\",\n        ),\n    ],\n    axis=1,\n)\n\nport_warf_df\n</pre> port_warf_df = pd.concat(     [         port_df,         rtg.get_warf_from_ratings(             ratings=port_df[\"worst_rtg\"],             rating_provider=\"S&amp;P\",         ),     ],     axis=1, )  port_warf_df Out[2]: ISIN weight worst_rtg warf_worst_rtg 0 ISIN00000001 0.518515 AAA 1.0 1 ISIN00000002 0.950810 AA+ 10.0 2 ISIN00000003 0.497176 AA 20.0 3 ISIN00000004 0.648453 AA- 40.0 4 ISIN00000005 0.674328 AA- 40.0 ... ... ... ... ... 82 ISIN00000083 2.321185 BBB+ 260.0 83 ISIN00000084 1.389043 BBB+ 260.0 84 ISIN00000085 2.296711 BBB+ 260.0 85 ISIN00000086 1.015105 AAA 1.0 86 ISIN00000087 0.964399 AA 20.0 <p>87 rows \u00d7 4 columns</p> <p>Finally, we need to compute the WARF on a portfolio basis, which we subsequently convert back into a human-readable rating. For the former, we use the <code>get_weighted_average</code> function and the <code>get_ratings_from_warf</code> function for the latter.</p> In\u00a0[3]: Copied! <pre>avg_warf = rtg.get_weighted_average(\n    data=port_warf_df[\"warf_worst_rtg\"],\n    weights=port_warf_df[\"weight\"] / 100,\n)\n\nprint(f\"WARF: {avg_warf:.2f}\")\n</pre> avg_warf = rtg.get_weighted_average(     data=port_warf_df[\"warf_worst_rtg\"],     weights=port_warf_df[\"weight\"] / 100, )  print(f\"WARF: {avg_warf:.2f}\") <pre>WARF: 165.58\n</pre> In\u00a0[4]: Copied! <pre>avg_warf_equivalent_rating = rtg.get_ratings_from_warf(\n    warf=avg_warf,\n    rating_provider=\"SP\",\n)\n\nprint(f\"Portfolio equivalent WARF rating: {avg_warf_equivalent_rating}\")\n</pre> avg_warf_equivalent_rating = rtg.get_ratings_from_warf(     warf=avg_warf,     rating_provider=\"SP\", )  print(f\"Portfolio equivalent WARF rating: {avg_warf_equivalent_rating}\") <pre>Portfolio equivalent WARF rating: A-\n</pre> <p>There you go. The portfolio WARF is A-.</p> <p>Do you prefer to show the rating using Moody\u2019s rating scale? \u2014 It\u2019s as simple as changing the <code>rating_provider</code> argument to \u201cMoody\u201d.</p> In\u00a0[5]: Copied! <pre>avg_warf_equivalent_rating = rtg.get_ratings_from_warf(\n    warf=avg_warf, rating_provider=\"Moody\"\n)\n\nprint(f\"Portfolio equivalent WARF rating: {avg_warf_equivalent_rating}\")\n</pre> avg_warf_equivalent_rating = rtg.get_ratings_from_warf(     warf=avg_warf, rating_provider=\"Moody\" )  print(f\"Portfolio equivalent WARF rating: {avg_warf_equivalent_rating}\") <pre>Portfolio equivalent WARF rating: A3\n</pre> In\u00a0[6]: Copied! <pre>print(f\"WARF buffer: {rtg.get_warf_buffer(avg_warf):.2f}\")\n</pre> print(f\"WARF buffer: {rtg.get_warf_buffer(avg_warf):.2f}\") <pre>WARF buffer: 54.42\n</pre>"},{"location":"case_studies/port_warf/#compute-portfolio-warf","title":"Compute portfolio WARF\u00b6","text":"<p>The following case-study demonstrates how to compute the weighted average rating factor for a portfolio.</p>"},{"location":"case_studies/port_warf/#preliminary-tasks","title":"Preliminary tasks\u00b6","text":"<p>As a first step, we are going to import a portfolio into a <code>pd.DataFrame</code>. We'll call it <code>port_df</code>. This dataframe comprises a number of securities with respective weights and ratings.</p>"},{"location":"case_studies/port_warf/#computing-portfolio-warf","title":"Computing portfolio WARF\u00b6","text":"<p>The column worst_rtg will be used in order to translate the ratings into WARFs according to the following table.</p> <p></p> <p>We will use <code>get_warf_from_ratings</code> to translate the human-readable ratings into WARFs. The function needs a rating provider (here: \"S&amp;P\") in order to select an appropriate translation dictionary.</p>"},{"location":"case_studies/port_warf/#compute-the-warf-buffer","title":"Compute the WARF buffer\u00b6","text":"<p>The WARF buffer is the distance from the current WARF to the next <code>maxWARF</code> level. It determines the room until a further rating downgrade takes place.</p> <p>Earlier, we determined that the portfolio WARF is equal to 165.58. Let's compute the WARF buffer.</p> <p>The corresponding <code>maxWARF</code> value is 220. The buffer is then equal to 220 - 165.58 = 54.42.</p> <p>pyratings provides the function <code>get_warf_buffer</code> to help you compute the WARF buffer.</p>"},{"location":"case_studies/prepare_rtg/","title":"Prepare your ratings data","text":"In\u00a0[1]: Copied! <pre>import pandas as pd\n\nimport pyratings as rtg\n\nport_df = pd.read_excel(\"portfolio.xlsx\")\nport_df.head()\n</pre> import pandas as pd  import pyratings as rtg  port_df = pd.read_excel(\"portfolio.xlsx\") port_df.head() Out[1]: ISIN weight BB Comp SP Moody Fitch 0 ISIN00000001 0.518515 AAA NR Aaa *- AAA 1 ISIN00000002 0.950810 AAA AA+ Aaa AAA 2 ISIN00000003 0.497176 AA+ *- AA+ Aa2 NaN 3 ISIN00000004 0.648453 NR NaN NR AA-u 4 ISIN00000005 0.674328 NR NaN NR AA-u In\u00a0[2]: Copied! <pre>ratings_clean_df = rtg.get_pure_ratings(\n    port_df.loc[:, [\"BB Comp\", \"SP\", \"Moody\", \"Fitch\"]]\n)\nratings_clean_df.head()\n</pre> ratings_clean_df = rtg.get_pure_ratings(     port_df.loc[:, [\"BB Comp\", \"SP\", \"Moody\", \"Fitch\"]] ) ratings_clean_df.head() Out[2]: BB Comp_clean SP_clean Moody_clean Fitch_clean 0 AAA NR Aaa AAA 1 AAA AA+ Aaa AAA 2 AA+ AA+ Aa2 NaN 3 NR NaN NR AA- 4 NR NaN NR AA- <p>As you can see, the suffix \"_clean\" has automatically been added to the column headings. Let's add these clean ratings to <code>port_df</code> by simple concatenation.</p> In\u00a0[3]: Copied! <pre>port_df = pd.concat([port_df, ratings_clean_df], axis=1)\nport_df.head()\n</pre> port_df = pd.concat([port_df, ratings_clean_df], axis=1) port_df.head() Out[3]: ISIN weight BB Comp SP Moody Fitch BB Comp_clean SP_clean Moody_clean Fitch_clean 0 ISIN00000001 0.518515 AAA NR Aaa *- AAA AAA NR Aaa AAA 1 ISIN00000002 0.950810 AAA AA+ Aaa AAA AAA AA+ Aaa AAA 2 ISIN00000003 0.497176 AA+ *- AA+ Aa2 NaN AA+ AA+ Aa2 NaN 3 ISIN00000004 0.648453 NR NaN NR AA-u NR NaN NR AA- 4 ISIN00000005 0.674328 NR NaN NR AA-u NR NaN NR AA- In\u00a0[4]: Copied! <pre>port_df = pd.concat(\n    [\n        port_df,\n        rtg.get_worst_ratings(\n            ratings=ratings_clean_df,\n            rating_provider_input=[\"Bloomberg\", \"S&amp;P\", \"Moody's\", \"Fitch\"],\n            rating_provider_output=\"S&amp;P\",\n        ),\n    ],\n    axis=1,\n)\n\nport_df.head()\n</pre> port_df = pd.concat(     [         port_df,         rtg.get_worst_ratings(             ratings=ratings_clean_df,             rating_provider_input=[\"Bloomberg\", \"S&amp;P\", \"Moody's\", \"Fitch\"],             rating_provider_output=\"S&amp;P\",         ),     ],     axis=1, )  port_df.head() Out[4]: ISIN weight BB Comp SP Moody Fitch BB Comp_clean SP_clean Moody_clean Fitch_clean worst_rtg 0 ISIN00000001 0.518515 AAA NR Aaa *- AAA AAA NR Aaa AAA AAA 1 ISIN00000002 0.950810 AAA AA+ Aaa AAA AAA AA+ Aaa AAA AA+ 2 ISIN00000003 0.497176 AA+ *- AA+ Aa2 NaN AA+ AA+ Aa2 NaN AA 3 ISIN00000004 0.648453 NR NaN NR AA-u NR NaN NR AA- AA- 4 ISIN00000005 0.674328 NR NaN NR AA-u NR NaN NR AA- AA- <p>There you are. You have all your securities and only one concrete rating attached to each one (in this case the worst rating).</p> In\u00a0[5]: Copied! <pre>port_df.loc[:, [\"ISIN\", \"weight\", \"worst_rtg\"]].head()\n</pre> port_df.loc[:, [\"ISIN\", \"weight\", \"worst_rtg\"]].head() Out[5]: ISIN weight worst_rtg 0 ISIN00000001 0.518515 AAA 1 ISIN00000002 0.950810 AA+ 2 ISIN00000003 0.497176 AA 3 ISIN00000004 0.648453 AA- 4 ISIN00000005 0.674328 AA-"},{"location":"case_studies/prepare_rtg/#prepare-your-ratings-data","title":"Prepare your ratings data\u00b6","text":"<p>The following case-study demonstrates how to prepare your ratings for further processing.</p>"},{"location":"case_studies/prepare_rtg/#preliminary-tasks","title":"Preliminary tasks\u00b6","text":"<p>As a first step, we are going to import a portfolio into a <code>pd.DataFrame</code>. We'll call it <code>port_df</code>. This dataframe comprises a number of securities with respective weights and ratings from different rating agencies.</p>"},{"location":"case_studies/prepare_rtg/#clean-your-ratings","title":"Clean your ratings\u00b6","text":"<p>By looking at the very first rows of <code>port_df</code>, we can see that some ratings do have a watch attached. This is marked by the <code>*-</code> suffix, which follows the actual rating after a blank. Other ratings are unsolicited. In this case, the rating is followed by the letter <code>u</code>.</p> <p>Before we can use these ratings for further computations, we need to clean the ratings and get rid of everything that is not part of the actual rating. That is, we need to strip off watches etc.</p> <p>We are going to use the get_pure_ratings function. This function works on strings, so we need to make sure to pass the relevant columns.</p>"},{"location":"case_studies/prepare_rtg/#consolidate-your-ratings","title":"Consolidate your ratings\u00b6","text":"<p>The natural next step is to consolidate the ratings; i.e. we need to assign one and only one concrete rating to any individual security.</p> <p>Let's compute the worst ratings and directly concatenate the newly computed column to our existing <code>port_df</code> in one batch. pyratings automatically names the new column \"worst_rtg\".</p> <p>We are going to use <code>get_worst_ratings</code> and use S&amp;P's rating scale to display the data.</p>"},{"location":"user_guide/cleansing/","title":"Data cleansing","text":"In\u00a0[1]: Copied! <pre>import pandas as pd\nimport numpy as np\n\nimport pyratings as rtg\n</pre> import pandas as pd import numpy as np  import pyratings as rtg In\u00a0[2]: Copied! <pre>unsolicited_rating = \"BBB+u\"\nrtg.get_pure_ratings(ratings=unsolicited_rating)\n</pre> unsolicited_rating = \"BBB+u\" rtg.get_pure_ratings(ratings=unsolicited_rating) Out[2]: <pre>'BBB+'</pre> In\u00a0[3]: Copied! <pre>rating_with_outlook = \"AA *-\"\nrtg.get_pure_ratings(ratings=rating_with_outlook)\n</pre> rating_with_outlook = \"AA *-\" rtg.get_pure_ratings(ratings=rating_with_outlook) Out[3]: <pre>'AA'</pre> In\u00a0[4]: Copied! <pre>rtg_df = pd.DataFrame(\n    data={\n        \"rtg_SP\": [\n            \"BB+ *-\",\n            \"BBB *+\",\n            np.nan,\n            \"AA- (Developing)\",\n            np.nan,\n            \"CCC+ (CwPositive)\",\n            \"BB+u\",\n        ],\n        \"rtg_Fitch\": [\n            \"BB+ *-\",\n            \"BBB *+\",\n            pd.NA,\n            \"AA- (Developing)\",\n            np.nan,\n            \"CCC+ (CwPositive)\",\n            \"BB+u\",\n        ],\n    },\n)\n\nrtg_df\n</pre> rtg_df = pd.DataFrame(     data={         \"rtg_SP\": [             \"BB+ *-\",             \"BBB *+\",             np.nan,             \"AA- (Developing)\",             np.nan,             \"CCC+ (CwPositive)\",             \"BB+u\",         ],         \"rtg_Fitch\": [             \"BB+ *-\",             \"BBB *+\",             pd.NA,             \"AA- (Developing)\",             np.nan,             \"CCC+ (CwPositive)\",             \"BB+u\",         ],     }, )  rtg_df Out[4]: rtg_SP rtg_Fitch 0 BB+ *- BB+ *- 1 BBB *+ BBB *+ 2 NaN &lt;NA&gt; 3 AA- (Developing) AA- (Developing) 4 NaN NaN 5 CCC+ (CwPositive) CCC+ (CwPositive) 6 BB+u BB+u In\u00a0[5]: Copied! <pre>rtg.get_pure_ratings(ratings=rtg_df)\n</pre> rtg.get_pure_ratings(ratings=rtg_df) Out[5]: rtg_SP_clean rtg_Fitch_clean 0 BB+ BB+ 1 BBB BBB 2 NaN &lt;NA&gt; 3 AA- AA- 4 NaN NaN 5 CCC+ CCC+ 6 BB+ BB+"},{"location":"user_guide/cleansing/#data-cleansing","title":"Data cleansing\u00b6","text":"<p>When working with data, you seldom get data that you can directly work with. Oftentimes your data are kind of messy, e.g. there might be missing data, outliers etc. With respect to credit ratings, rating agencies often attach rating outlooks or rating watches. They should indicate in what direction the rating agency will probably change the rating going forward. When an outlook has been assigned to a rating, it might look something like AA- *+, i.e. the outlook follows the star sign.</p> <p>These \"attachments\" do create some harm. Consider a BBB- rating with a negative outlook. This means that the rating agency might lower the rating in the foreseeable future. What rating score should such a rating get assigned? Usually, a BBB- rating is equivalent to a rating score of 10 (see Long-term ratings). Should we assign a rating score of 11 just because of the watch? \u2014 Probably not! Firstly, the rating hasn't been lowered as of today, and, secondly, a lower rating in the future is not certain at all.</p> <p>As a matter of fact, when considering the current status quo, most of the time the best idea is to ignore credit outlooks and credit watches altogether. That is, clean your data!</p> <p>There is at least one other fact that makes cleansing necessary: Unsolicited ratings . An unsolicited rating is usually designated by the letter \"u\", which is directly attached to the actual rating, e.g. AA-u. To translate the rating into a score and being able to use it properly in any kind of computation, you better get rid of this letter.</p> <p>For all these cases, pyratings offers a function called <code>get_pure_ratings</code>. Its sole purpose is to clean ratings, i.e. remove watches/outlooks and the letter \"u\".</p> <p>Before starting, let's import some libraries.</p>"},{"location":"user_guide/cleansing/#cleaning-single-ratings","title":"Cleaning single ratings\u00b6","text":""},{"location":"user_guide/cleansing/#cleaning-a-pddataframe","title":"Cleaning a <code>pd.DataFrame</code>\u00b6","text":"<p>It's also possible to pass a <code>pd.DataFrame</code> and have all cells get cleaned at once. Also, note that the column headers will be suffixed (\"_clean\").</p>"},{"location":"user_guide/consolidate/","title":"Consolidate ratings","text":"In\u00a0[1]: Copied! <pre>import pandas as pd\n\nimport pyratings as rtg\n</pre> import pandas as pd  import pyratings as rtg In\u00a0[2]: Copied! <pre>ratings_df = pd.DataFrame(\n    data=(\n        {\n            \"rating_S&amp;P\": [\"AAA\", \"AA-\", \"AA+\", \"BB-\", \"C\"],\n            \"rating_Moody's\": [\"Aa1\", \"Aa3\", \"Aa2\", \"Ba3\", \"Ca\"],\n            \"rating_Fitch\": [\"AA-\", \"AA-\", \"AA-\", \"B+\", \"C\"],\n        }\n    ),\n    index=[f\"security_{i}\" for i in range(5)],\n)\nratings_df\n</pre> ratings_df = pd.DataFrame(     data=(         {             \"rating_S&amp;P\": [\"AAA\", \"AA-\", \"AA+\", \"BB-\", \"C\"],             \"rating_Moody's\": [\"Aa1\", \"Aa3\", \"Aa2\", \"Ba3\", \"Ca\"],             \"rating_Fitch\": [\"AA-\", \"AA-\", \"AA-\", \"B+\", \"C\"],         }     ),     index=[f\"security_{i}\" for i in range(5)], ) ratings_df Out[2]: rating_S&amp;P rating_Moody's rating_Fitch security_0 AAA Aa1 AA- security_1 AA- Aa3 AA- security_2 AA+ Aa2 AA- security_3 BB- Ba3 B+ security_4 C Ca C In\u00a0[3]: Copied! <pre>best_ratings = rtg.get_best_ratings(\n    ratings=ratings_df, rating_provider_input=[\"S&amp;P\", \"Moody\", \"Fitch\"]\n)\n\nsecond_best_ratings = rtg.get_second_best_ratings(\n    ratings=ratings_df, rating_provider_input=[\"S&amp;P\", \"Moody\", \"Fitch\"]\n)\nworst_ratings = rtg.get_worst_ratings(\n    ratings=ratings_df, rating_provider_input=[\"S&amp;P\", \"Moody\", \"Fitch\"]\n)\n\npd.concat([best_ratings, second_best_ratings, worst_ratings], axis=1)\n</pre> best_ratings = rtg.get_best_ratings(     ratings=ratings_df, rating_provider_input=[\"S&amp;P\", \"Moody\", \"Fitch\"] )  second_best_ratings = rtg.get_second_best_ratings(     ratings=ratings_df, rating_provider_input=[\"S&amp;P\", \"Moody\", \"Fitch\"] ) worst_ratings = rtg.get_worst_ratings(     ratings=ratings_df, rating_provider_input=[\"S&amp;P\", \"Moody\", \"Fitch\"] )  pd.concat([best_ratings, second_best_ratings, worst_ratings], axis=1) Out[3]: best_rtg second_best_rtg worst_rtg security_0 AAA AA+ AA- security_1 AA- AA- AA- security_2 AA+ AA AA- security_3 BB- BB- B+ security_4 CC C C <p>Did you realize that the output dataframe only uses S&amp;P/Fitch rating scales? If you prefer to get the results in a different ratings scale, you can specify the <code>rating_provider_output</code> argument. Also, if you don't specify <code>rating_provider_input</code>, pyratings tries to infer the correct rating provider from <code>ratings_df</code> column headers.</p> In\u00a0[4]: Copied! <pre>best_ratings = rtg.get_best_ratings(\n    ratings=ratings_df,\n    rating_provider_output=\"Moody\",\n)\n\nsecond_best_ratings = rtg.get_second_best_ratings(\n    ratings=ratings_df,\n    rating_provider_output=\"Moody\",\n)\nworst_ratings = rtg.get_worst_ratings(\n    ratings=ratings_df, rating_provider_output=\"Moody\"\n)\n\npd.concat([best_ratings, second_best_ratings, worst_ratings], axis=1)\n</pre> best_ratings = rtg.get_best_ratings(     ratings=ratings_df,     rating_provider_output=\"Moody\", )  second_best_ratings = rtg.get_second_best_ratings(     ratings=ratings_df,     rating_provider_output=\"Moody\", ) worst_ratings = rtg.get_worst_ratings(     ratings=ratings_df, rating_provider_output=\"Moody\" )  pd.concat([best_ratings, second_best_ratings, worst_ratings], axis=1) Out[4]: best_rtg second_best_rtg worst_rtg security_0 Aaa Aa1 Aa3 security_1 Aa3 Aa3 Aa3 security_2 Aa1 Aa2 Aa3 security_3 Ba3 Ba3 B1 security_4 Ca C C"},{"location":"user_guide/consolidate/#consolidate-ratings","title":"Consolidate ratings\u00b6","text":"<p>Oftentimes, an individual security/entity has ratings from several rating agencies. For example, a security might have a BBB- rating from S&amp;P, a BBB rating from Fitch, and a Ba1 rating from Moody's. Now, let's imagine your investment guidelines only allow investments in securities that have an investment grade rating, i.e. Baa3/BBB- at a minimum. You might wonder which of the attached ratings is relevant? Is this particular security regarded as investment grade (as S&amp;P and Fitch are indicating) or is it already a junk bond (as implied by Moody's)? \u2014 Well, there's no definitive answer, it simply depends.</p> <p>There are several ways to answer this question. pyratings offers the following three functions in order to consolidate multiple ratings into a final rating:</p> <ol> <li><code>get_best_ratings</code> Choose the best rating among all rating agencies. That's the aggressive way.</li> <li><code>get_second_best_ratings</code> Choose the second-best rating among all rating agencies. That's a less aggressive way.</li> <li><code>get_worst_ratings</code> Choose the worst rating among all rating agencies. That's the conservative way.</li> </ol>"},{"location":"user_guide/translation/","title":"Translating ratings","text":"In\u00a0[1]: Copied! <pre>import pandas as pd\n\nimport pyratings as rtg\n</pre> import pandas as pd  import pyratings as rtg In\u00a0[2]: Copied! <pre>ratings_df = pd.DataFrame(\n    data=(\n        {\n            \"rating_S&amp;P\": [\"AAA\", \"AA-\", \"AA+\", \"BB-\", \"C\"],\n            \"rating_Moody's\": [\"Aa1\", \"Aa3\", \"Aa2\", \"Ba3\", \"Ca\"],\n            \"rating_Fitch\": [\"AA-\", \"AA-\", \"AA-\", \"B+\", \"C\"],\n        }\n    ),\n    index=[f\"security_{i}\" for i in range(5)],\n)\nratings_df\n</pre> ratings_df = pd.DataFrame(     data=(         {             \"rating_S&amp;P\": [\"AAA\", \"AA-\", \"AA+\", \"BB-\", \"C\"],             \"rating_Moody's\": [\"Aa1\", \"Aa3\", \"Aa2\", \"Ba3\", \"Ca\"],             \"rating_Fitch\": [\"AA-\", \"AA-\", \"AA-\", \"B+\", \"C\"],         }     ),     index=[f\"security_{i}\" for i in range(5)], ) ratings_df Out[2]: rating_S&amp;P rating_Moody's rating_Fitch security_0 AAA Aa1 AA- security_1 AA- Aa3 AA- security_2 AA+ Aa2 AA- security_3 BB- Ba3 B+ security_4 C Ca C In\u00a0[3]: Copied! <pre>scores_df = rtg.get_scores_from_ratings(\n    ratings=ratings_df, rating_provider=[\"SP\", \"Moody\", \"Fitch\"]\n)\n\nscores_df\n</pre> scores_df = rtg.get_scores_from_ratings(     ratings=ratings_df, rating_provider=[\"SP\", \"Moody\", \"Fitch\"] )  scores_df Out[3]: rtg_score_rating_S&amp;P rtg_score_rating_Moody's rtg_score_rating_Fitch security_0 1 2 4 security_1 4 4 4 security_2 2 3 4 security_3 13 13 14 security_4 21 20 21 <p>Converting the numerical scores back into human-readable ratings is as easy as:</p> In\u00a0[4]: Copied! <pre>rtg.get_ratings_from_scores(\n    rating_scores=scores_df, rating_provider=[\"SP\", \"Moody\", \"Fitch\"]\n)\n</pre> rtg.get_ratings_from_scores(     rating_scores=scores_df, rating_provider=[\"SP\", \"Moody\", \"Fitch\"] ) Out[4]: rtg_SP rtg_Moody rtg_Fitch security_0 AAA Aa1 AA- security_1 AA- Aa3 AA- security_2 AA+ Aa2 AA- security_3 BB- Ba3 B+ security_4 C Ca C In\u00a0[5]: Copied! <pre>rtg.get_warf_from_ratings(ratings=ratings_df)\n</pre> rtg.get_warf_from_ratings(ratings=ratings_df) Out[5]: warf_rating_S&amp;P warf_rating_Moody's warf_rating_Fitch security_0 1 10 40 security_1 40 40 40 security_2 10 20 40 security_3 1766 1766 2220 security_4 9999 9998 9999 <p>Again, when not specifying <code>rating_provider</code>, pyratings tries to extract the appropriate rating provider automatically.</p>"},{"location":"user_guide/translation/#translating-ratings","title":"Translating ratings\u00b6","text":"<p>When working with ratings, you pretty fast come to the point where you need to do some computations, e.g. calculating the average rating of a portfolio.</p> <p>In these cases, you can't simply use human-readable ratings. You first need to translate these ratings into numerical rating scores. And when you are done with your computations and want to present your results, you have to translate rating scores back into human-readable ratings.</p> <p>When translating ratings into scores and vice versa, there's a difference between long-term and short-term ratings and pyratings actually uses different translation tables.</p>"},{"location":"user_guide/translation/#ratings-vs-numerical-scores","title":"Ratings vs. numerical scores\u00b6","text":"<p>pyratings provides a number of functions that help to translate ratings into scores and vice versa. The respective API Reference holds a number of concrete examples of how to apply these functions.</p> <ul> <li><code>get_scores_from_ratings</code>: Convert regular ratings into numerical rating scores.</li> <li><code>get_ratings_from_scores</code>: Convert numerical rating scores into regular ratings.</li> </ul> <p>For example, we can convert <code>ratings_df</code> into scores as follows:</p>"},{"location":"user_guide/translation/#ratings-vs-warf","title":"Ratings vs. WARF\u00b6","text":"<p>pyratings also offers the possibility to translate ratings (or even rating scores) into WARF's and vice versa. Again, take a look at the individual function's references and study the examples.</p> <ul> <li><code>get_warf_from_ratings</code>: Convert regular rating(s) to numerical WARF(s).</li> <li><code>get_ratings_from_warf</code>: Convert WARFs into regular ratings.</li> </ul> <p>For example, we can convert <code>ratings_df</code> into WARFs as follows:</p>"}]}